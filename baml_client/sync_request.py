###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Any, Dict, List, Optional, Union, TypedDict, Type, Literal
from typing_extensions import NotRequired

import baml_py

from . import types
from .types import Checked, Check
from .type_builder import TypeBuilder


class BamlCallOptions(TypedDict, total=False):
    tb: NotRequired[TypeBuilder]
    client_registry: NotRequired[baml_py.baml_py.ClientRegistry]


class HttpRequest:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    def AnalyzeCiteSourceResults(
        self,
        input: types.CiteSourceAnalysisInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "AnalyzeCiteSourceResults",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def AnalyzeDifferentialDiagnoses_SNAPPS(
        self,
        input: types.AnalyzeDDxInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "AnalyzeDifferentialDiagnoses_SNAPPS",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def AnalyzeMedicalPaper(
        self,
        paper_text: str,text_type: types.TextType,clinical_question: Optional[str],source_type: Optional[str],publication_year: Optional[int],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "AnalyzeMedicalPaper",
        {
          "paper_text": paper_text,"text_type": text_type,"clinical_question": clinical_question,"source_type": source_type,"publication_year": publication_year,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def AnalyzePDFDocument(
        self,
        input: types.PDFAnalysisInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "AnalyzePDFDocument",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def AnswerProbeQuestions_SNAPPS(
        self,
        input: types.AnswerProbeQuestionsInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "AnswerProbeQuestions_SNAPPS",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def AssistInIdentifyingCognitiveBiases(
        self,
        input: types.CognitiveBiasInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "AssistInIdentifyingCognitiveBiases",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def EvaluateManagementPlan_SNAPPS(
        self,
        input: types.EvaluateManagementPlanInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "EvaluateManagementPlan_SNAPPS",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def EvaluateSummary_SNAPPS(
        self,
        input: types.EvaluateSummaryInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "EvaluateSummary_SNAPPS",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ExpandDifferentialDiagnosis(
        self,
        input: types.ExpandDifferentialDiagnosisInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExpandDifferentialDiagnosis",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ExtractPubMedKeywords(
        self,
        complex_query: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractPubMedKeywords",
        {
          "complex_query": complex_query,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def FacilitateDDxAnalysis_SNAPPS(
        self,
        input: types.FacilitateDDxAnalysisInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "FacilitateDDxAnalysis_SNAPPS",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def FormulateDeepResearchStrategy(
        self,
        input: types.ResearchTaskInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "FormulateDeepResearchStrategy",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def FormulateEvidenceBasedPICOQuestion(
        self,
        input: types.ClinicalScenarioInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "FormulateEvidenceBasedPICOQuestion",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def GenerateCiteSourceReport(
        self,
        input: types.CiteSourceReportInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "GenerateCiteSourceReport",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def GenerateClinicalWorkflowQuestions(
        self,
        input: types.DdxQuestioningInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "GenerateClinicalWorkflowQuestions",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def GenerateDiagnosticTimeout(
        self,
        input: types.DiagnosticTimeoutInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "GenerateDiagnosticTimeout",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def GenerateDrCorvusInsights(
        self,
        input: types.LabAnalysisInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "GenerateDrCorvusInsights",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def GenerateEvidenceAppraisal(
        self,
        extracted_data: types.EvidenceAnalysisData,clinical_question: Optional[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "GenerateEvidenceAppraisal",
        {
          "extracted_data": extracted_data,"clinical_question": clinical_question,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def GenerateIllnessScript(
        self,
        input: types.IllnessScriptInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "GenerateIllnessScript",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def OptimizeSearchStrategy(
        self,
        query: str,cite_source_metrics: types.CiteSourceMetrics,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "OptimizeSearchStrategy",
        {
          "query": query,"cite_source_metrics": cite_source_metrics,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ProvideCompareContrastFeedback(
        self,
        input: types.CompareContrastExerciseInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ProvideCompareContrastFeedback",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ProvideFeedbackOnProblemRepresentation(
        self,
        input: types.BAMLProblemRepresentationInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ProvideFeedbackOnProblemRepresentation",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ProvideMatrixFeedback(
        self,
        input: types.CompareContrastMatrixInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ProvideMatrixFeedback",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ProvideSelfReflectionFeedback(
        self,
        input: types.SelfReflectionInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ProvideSelfReflectionFeedback",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ProvideSessionSummary_SNAPPS(
        self,
        input: types.ProvideSessionSummaryInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ProvideSessionSummary_SNAPPS",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def SuggestPatientFriendlyFollowUpChecklist(
        self,
        input: types.PatientFollowUpInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "SuggestPatientFriendlyFollowUpChecklist",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def SummarizeAndStructureClinicalData(
        self,
        input: types.ClinicalDataInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "SummarizeAndStructureClinicalData",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def SynthesizeDeepResearch(
        self,
        original_query: str,search_results: List[types.RawSearchResultItem],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "SynthesizeDeepResearch",
        {
          "original_query": original_query,"search_results": search_results,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def SynthesizeDeepResearchMinimal(
        self,
        original_query: str,search_results: List[types.RawSearchResultItem],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "SynthesizeDeepResearchMinimal",
        {
          "original_query": original_query,"search_results": search_results,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def SynthesizeDeepResearchSimple(
        self,
        original_query: str,search_results: List[types.RawSearchResultItem],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "SynthesizeDeepResearchSimple",
        {
          "original_query": original_query,"search_results": search_results,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def TeachQuestionPrioritization(
        self,
        input: types.DdxQuestioningInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "TeachQuestionPrioritization",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def TranslateToEnglish(
        self,
        input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "TranslateToEnglish",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def TranslateToPortuguese(
        self,
        input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "TranslateToPortuguese",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    


class HttpStreamRequest:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    def AnalyzeCiteSourceResults(
        self,
        input: types.CiteSourceAnalysisInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "AnalyzeCiteSourceResults",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def AnalyzeDifferentialDiagnoses_SNAPPS(
        self,
        input: types.AnalyzeDDxInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "AnalyzeDifferentialDiagnoses_SNAPPS",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def AnalyzeMedicalPaper(
        self,
        paper_text: str,text_type: types.TextType,clinical_question: Optional[str],source_type: Optional[str],publication_year: Optional[int],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "AnalyzeMedicalPaper",
        {
          "paper_text": paper_text,"text_type": text_type,"clinical_question": clinical_question,"source_type": source_type,"publication_year": publication_year,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def AnalyzePDFDocument(
        self,
        input: types.PDFAnalysisInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "AnalyzePDFDocument",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def AnswerProbeQuestions_SNAPPS(
        self,
        input: types.AnswerProbeQuestionsInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "AnswerProbeQuestions_SNAPPS",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def AssistInIdentifyingCognitiveBiases(
        self,
        input: types.CognitiveBiasInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "AssistInIdentifyingCognitiveBiases",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def EvaluateManagementPlan_SNAPPS(
        self,
        input: types.EvaluateManagementPlanInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "EvaluateManagementPlan_SNAPPS",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def EvaluateSummary_SNAPPS(
        self,
        input: types.EvaluateSummaryInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "EvaluateSummary_SNAPPS",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ExpandDifferentialDiagnosis(
        self,
        input: types.ExpandDifferentialDiagnosisInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExpandDifferentialDiagnosis",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ExtractPubMedKeywords(
        self,
        complex_query: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractPubMedKeywords",
        {
          "complex_query": complex_query,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def FacilitateDDxAnalysis_SNAPPS(
        self,
        input: types.FacilitateDDxAnalysisInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "FacilitateDDxAnalysis_SNAPPS",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def FormulateDeepResearchStrategy(
        self,
        input: types.ResearchTaskInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "FormulateDeepResearchStrategy",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def FormulateEvidenceBasedPICOQuestion(
        self,
        input: types.ClinicalScenarioInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "FormulateEvidenceBasedPICOQuestion",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def GenerateCiteSourceReport(
        self,
        input: types.CiteSourceReportInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "GenerateCiteSourceReport",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def GenerateClinicalWorkflowQuestions(
        self,
        input: types.DdxQuestioningInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "GenerateClinicalWorkflowQuestions",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def GenerateDiagnosticTimeout(
        self,
        input: types.DiagnosticTimeoutInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "GenerateDiagnosticTimeout",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def GenerateDrCorvusInsights(
        self,
        input: types.LabAnalysisInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "GenerateDrCorvusInsights",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def GenerateEvidenceAppraisal(
        self,
        extracted_data: types.EvidenceAnalysisData,clinical_question: Optional[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "GenerateEvidenceAppraisal",
        {
          "extracted_data": extracted_data,"clinical_question": clinical_question,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def GenerateIllnessScript(
        self,
        input: types.IllnessScriptInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "GenerateIllnessScript",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def OptimizeSearchStrategy(
        self,
        query: str,cite_source_metrics: types.CiteSourceMetrics,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "OptimizeSearchStrategy",
        {
          "query": query,"cite_source_metrics": cite_source_metrics,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ProvideCompareContrastFeedback(
        self,
        input: types.CompareContrastExerciseInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ProvideCompareContrastFeedback",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ProvideFeedbackOnProblemRepresentation(
        self,
        input: types.BAMLProblemRepresentationInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ProvideFeedbackOnProblemRepresentation",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ProvideMatrixFeedback(
        self,
        input: types.CompareContrastMatrixInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ProvideMatrixFeedback",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ProvideSelfReflectionFeedback(
        self,
        input: types.SelfReflectionInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ProvideSelfReflectionFeedback",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ProvideSessionSummary_SNAPPS(
        self,
        input: types.ProvideSessionSummaryInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ProvideSessionSummary_SNAPPS",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def SuggestPatientFriendlyFollowUpChecklist(
        self,
        input: types.PatientFollowUpInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "SuggestPatientFriendlyFollowUpChecklist",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def SummarizeAndStructureClinicalData(
        self,
        input: types.ClinicalDataInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "SummarizeAndStructureClinicalData",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def SynthesizeDeepResearch(
        self,
        original_query: str,search_results: List[types.RawSearchResultItem],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "SynthesizeDeepResearch",
        {
          "original_query": original_query,"search_results": search_results,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def SynthesizeDeepResearchMinimal(
        self,
        original_query: str,search_results: List[types.RawSearchResultItem],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "SynthesizeDeepResearchMinimal",
        {
          "original_query": original_query,"search_results": search_results,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def SynthesizeDeepResearchSimple(
        self,
        original_query: str,search_results: List[types.RawSearchResultItem],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "SynthesizeDeepResearchSimple",
        {
          "original_query": original_query,"search_results": search_results,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def TeachQuestionPrioritization(
        self,
        input: types.DdxQuestioningInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "TeachQuestionPrioritization",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def TranslateToEnglish(
        self,
        input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "TranslateToEnglish",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def TranslateToPortuguese(
        self,
        input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "TranslateToPortuguese",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    


__all__ = ["HttpRequest", "HttpStreamRequest"]