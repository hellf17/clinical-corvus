# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from pydantic import BaseModel, ConfigDict

import baml_py

from . import types

StreamStateValueT = typing.TypeVar('StreamStateValueT')
class StreamState(BaseModel, typing.Generic[StreamStateValueT]):
    value: StreamStateValueT
    state: typing_extensions.Literal["Pending", "Incomplete", "Complete"]
# #########################################################################
# Generated classes (96)
# #########################################################################

class AnalyzeDDxInput(BaseModel):
    session_state: typing.Optional["SessionState"] = None
    student_differential_diagnoses: typing.List[str]

class AnswerProbeQuestionsInput(BaseModel):
    session_state: typing.Optional["SessionState"] = None
    student_questions: typing.List[str]

class AnsweredQuestion(BaseModel):
    question: typing.Optional[str] = None
    answer: typing.Optional[str] = None
    rationale: typing.Optional[str] = None

class BAMLProblemRepresentationInput(BaseModel):
    full_patient_narrative: typing.Optional[str] = None
    user_problem_representation: typing.Optional[str] = None
    user_semantic_qualifiers: typing.List[str]

class BatchTranslationOutput(BaseModel):
    translated_texts: typing.List[str]

class BenchmarkComparison(BaseModel):
    industry_percentile: typing.Optional[float] = None
    performance_grade: typing.Optional[str] = None
    benchmark_insights: typing.List[str]
    improvement_targets: typing.List[str]

class BiasAnalysis(BaseModel):
    id: typing.Optional[str] = None
    bias_type: typing.Optional[str] = None
    potential_impact: typing.Optional[str] = None
    mitigation_strategies: typing.Optional[str] = None
    actionable_suggestion: typing.Optional[str] = None

class BiasReflectionPoint(BaseModel):
    bias_type: typing.Optional[types.PossibleCognitiveBias] = None
    reflection_question: typing.Optional[str] = None

class CaseContext(BaseModel):
    demographics: typing.Optional[str] = None
    chief_complaint: typing.Optional[str] = None
    physical_exam: typing.Optional[str] = None
    vital_signs: typing.Optional[str] = None
    full_description: typing.Optional[str] = None
    expected_differentials: typing.Optional[typing.List[str]] = None
    learning_objectives: typing.Optional[typing.List[str]] = None
    expert_analysis: typing.Optional[str] = None

class CaseScenarioInput(BaseModel):
    case_vignette: typing.Optional[str] = None
    initial_findings: typing.List["ClinicalFinding"]
    plausible_hypotheses: typing.List[str]

class ChatResponse(BaseModel):
    role: typing.Optional[str] = None
    message: typing.Optional[str] = None
    citations: typing.Optional[typing.List[str]] = None

class CiteSourceAnalysisInput(BaseModel):
    search_results: typing.List["RawSearchResultItem"]
    query: typing.Optional[str] = None
    include_visualization_data: typing.Optional[bool] = None

class CiteSourceAnalysisOutput(BaseModel):
    deduplication_summary: typing.Optional["DeduplicationSummary"] = None
    source_performance: typing.List["SourcePerformanceMetrics"]
    quality_assessment: typing.Optional["QualityScores"] = None
    processing_insights: typing.List[str]
    recommendations: typing.List[str]
    deduplicated_results: typing.List["RawSearchResultItem"]
    processing_metadata: typing.Optional["ProcessingMetadata"] = None

class CiteSourceMetrics(BaseModel):
    total_sources_consulted: typing.Optional[int] = None
    original_results_count: typing.Optional[int] = None
    deduplicated_results_count: typing.Optional[int] = None
    deduplication_rate: typing.Optional[float] = None
    overall_quality_score: typing.Optional[float] = None
    coverage_score: typing.Optional[float] = None
    diversity_score: typing.Optional[float] = None
    recency_score: typing.Optional[float] = None
    impact_score: typing.Optional[float] = None
    source_balance_score: typing.Optional[float] = None
    best_performing_source: typing.Optional[str] = None
    processing_time_ms: typing.Optional[float] = None
    key_quality_insights: typing.List[str]

class CiteSourceReportInput(BaseModel):
    query: typing.Optional[str] = None
    max_results: typing.Optional[int] = None
    include_detailed_metrics: typing.Optional[bool] = None
    include_recommendations: typing.Optional[bool] = None

class CiteSourceReportOutput(BaseModel):
    executive_summary: typing.Optional["ExecutiveSummary"] = None
    quality_breakdown: typing.Optional["QualityScores"] = None
    source_analysis: typing.Optional["SourceAnalysis"] = None
    deduplication_analysis: typing.Optional["DeduplicationAnalysis"] = None
    actionable_insights: typing.List[str]
    benchmark_comparison: typing.Optional["BenchmarkComparison"] = None
    visual_data_summary: typing.Optional["VisualDataSummary"] = None
    disclaimer: typing.Optional[str] = None

class ClinicalDataInput(BaseModel):
    patient_story: typing.Optional[str] = None
    known_findings: typing.List["ClinicalFinding"]
    patient_demographics: typing.Optional[str] = None

class ClinicalFinding(BaseModel):
    finding_name: typing.Optional[str] = None
    details: typing.Optional[str] = None
    onset_duration_pattern: typing.Optional[str] = None
    severity_level: typing.Optional[str] = None

class ClinicalQueryAnalysis(BaseModel):
    query_type: typing.Optional[str] = None

class ClinicalScenarioInput(BaseModel):
    clinical_scenario: typing.Optional[str] = None
    additional_context: typing.Optional[str] = None

class ClinicalWorkflowQuestionsOutput(BaseModel):
    question_categories: typing.List["QuestionCategory"]
    red_flag_questions: typing.List[str]
    overall_rationale: typing.Optional[str] = None

class CognitiveBiasInput(BaseModel):
    case_summary_by_user: typing.Optional[str] = None
    case_vignette_id: typing.Optional[str] = None
    user_identified_biases: typing.List[str]

class CognitiveBiasReflectionOutput(BaseModel):
    potential_biases_to_consider: typing.List["DetectedCognitiveBias"]

class CompareContrastExerciseInput(BaseModel):
    scenario: typing.Optional["CaseScenarioInput"] = None
    student_analysis: typing.List["StudentHypothesisAnalysis"]

class CompareContrastFeedbackOutput(BaseModel):
    overall_feedback: typing.Optional[str] = None
    detailed_feedback_per_hypothesis: typing.List["HypothesisComparisonFeedback"]
    suggested_learning_focus: typing.Optional[str] = None

class CompareContrastMatrixInput(BaseModel):
    scenario: typing.Optional["CaseScenarioInput"] = None
    student_matrix_analysis: typing.List["HypothesisFindingAnalysis"]
    student_chosen_discriminator: typing.Optional[str] = None

class DdxEvaluation(BaseModel):
    diagnosis: typing.Optional[str] = None
    plausibility: typing.Optional[str] = None
    supporting_findings: typing.List[str]
    contradicting_findings: typing.List[str]

class DdxQuestioningInput(BaseModel):
    chief_complaint: typing.Optional[str] = None
    initial_findings: typing.List["ClinicalFinding"]
    patient_demographics: typing.Optional[str] = None

class DdxQuestioningOutput(BaseModel):
    prioritized_questions: typing.List[str]
    complementary_questions: typing.List[str]
    questioning_rationale: typing.Optional[str] = None
    potential_systems_to_explore: typing.List[str]

class DeduplicationAnalysis(BaseModel):
    efficiency_metrics: typing.Optional["DeduplicationSummary"] = None
    duplication_patterns: typing.List[str]
    source_overlap_analysis: typing.Optional[str] = None
    optimization_suggestions: typing.List[str]

class DeduplicationSummary(BaseModel):
    original_count: typing.Optional[int] = None
    deduplicated_count: typing.Optional[int] = None
    removed_duplicates: typing.Optional[int] = None
    deduplication_rate: typing.Optional[float] = None
    efficiency_score: typing.Optional[float] = None

class DetectedCognitiveBias(BaseModel):
    bias_type: typing.Optional[str] = None
    explanation_as_question: typing.Optional[str] = None
    mitigation_prompt: typing.Optional[str] = None

class DiagnosticTimeoutInput(BaseModel):
    case_description: typing.Optional[str] = None
    current_working_diagnosis: typing.Optional[str] = None
    time_elapsed_minutes: typing.Optional[int] = None
    complexity_level: typing.Optional[str] = None

class DiagnosticTimeoutOutput(BaseModel):
    timeout_recommendation: typing.Optional[str] = None
    alternative_diagnoses_to_consider: typing.List[str]
    key_questions_to_ask: typing.List[str]
    red_flags_to_check: typing.List[str]
    next_steps_suggested: typing.List[str]
    cognitive_checks: typing.List[str]

class DifferentialAnalysisOutputModel(BaseModel):
    ddx_evaluation: typing.List["DdxEvaluation"]
    missing_differentials: typing.List[str]
    prioritization_feedback: typing.Optional[str] = None
    socratic_questions: typing.List[str]
    next_step_guidance: typing.Optional[str] = None

class EvaluateManagementPlanInput(BaseModel):
    session_state: typing.Optional["SessionState"] = None
    student_plan: typing.Optional[str] = None

class EvaluateSummaryInput(BaseModel):
    case_context: typing.Optional["CaseContext"] = None
    student_summary: typing.Optional[str] = None

class EvidenceAnalysisData(BaseModel):
    study_objective: typing.Optional[str] = None
    study_design: typing.Optional[types.StudyDesignType] = None
    population: typing.Optional["PopulationInfo"] = None
    interventions: typing.Optional["InterventionInfo"] = None
    primary_outcomes: typing.List[str]
    key_results: typing.List["KeyResult"]
    authors_conclusions: typing.List[str]
    authors_acknowledged_limitations: typing.List[str]

class EvidenceAppraisalOutput(BaseModel):
    grade_summary: typing.Optional["GradeSummary"] = None
    quality_factors: typing.List["QualityFactor"]
    bias_analysis: typing.List["BiasAnalysis"]
    practice_recommendations: typing.Optional["PracticeRecommendations"] = None

class EvidenceTheme(BaseModel):
    theme_name: typing.Optional[str] = None
    key_findings: typing.List[str]
    strength_of_evidence: typing.Optional[str] = None
    supporting_studies_count: typing.Optional[int] = None

class ExecutiveSummary(BaseModel):
    total_sources_consulted: typing.Optional[int] = None
    deduplication_efficiency_rate: typing.Optional[float] = None
    overall_quality_grade: typing.Optional[str] = None
    best_performing_source: typing.Optional[str] = None
    key_strengths: typing.List[str]
    key_improvement_areas: typing.List[str]

class ExpandDifferentialDiagnosisInput(BaseModel):
    presenting_complaint: typing.Optional[str] = None
    clinical_signs: typing.Optional[str] = None
    patient_demographics: typing.Optional[str] = None
    user_initial_ddx_list: typing.List[str]

class ExpandedDdxOutput(BaseModel):
    applied_approach_description: typing.Optional[str] = None
    suggested_diagnoses: typing.List["ExpandedDiagnosis"]

class ExpandedDiagnosis(BaseModel):
    diagnosis_name: typing.Optional[str] = None
    rationale: typing.Optional[str] = None
    suspicion_level: typing.Optional[types.SuspicionLevel] = None
    category: typing.Optional[types.DiagnosisCategory] = None

class ExpertHypothesisFindingAnalysis(BaseModel):
    finding_name: typing.Optional[str] = None
    hypothesis_name: typing.Optional[str] = None
    expert_evaluation: typing.Optional[types.HypothesisFindingEvaluation] = None
    expert_rationale: typing.Optional[str] = None

class FacilitateDDxAnalysisInput(BaseModel):
    session_state: typing.Optional["SessionState"] = None
    student_analysis: typing.Optional[str] = None

class FacilitateDDxAnalysisOutputModel(BaseModel):
    response: typing.Optional[str] = None

class FormulatedSearchStrategyOutput(BaseModel):
    refined_query_for_llm_synthesis: typing.Optional[str] = None
    search_parameters_list: typing.List["SearchParameters"]
    search_rationale: typing.Optional[str] = None
    expected_evidence_types: typing.List[str]

class GradeSummary(BaseModel):
    overall_quality: typing.Optional[types.GradeLevel] = None
    recommendation_strength: typing.Optional[types.RecommendationStrength] = None
    summary_of_findings: typing.Optional[str] = None
    recommendation_balance: typing.Optional["RecommendationBalance"] = None
    reasoning_tags: typing.List["ReasoningTag"]

class HypothesisComparisonFeedback(BaseModel):
    hypothesis_name: typing.Optional[str] = None
    feedback_on_supporting_findings: typing.Optional[str] = None
    feedback_on_refuting_findings: typing.Optional[str] = None
    feedback_on_discriminators: typing.Optional[str] = None
    expert_comparison_points: typing.Optional[typing.List[str]] = None

class HypothesisFindingAnalysis(BaseModel):
    finding_name: typing.Optional[str] = None
    hypothesis_name: typing.Optional[str] = None
    student_evaluation: typing.Optional[types.HypothesisFindingEvaluation] = None
    student_rationale: typing.Optional[str] = None

class IllnessScriptInput(BaseModel):
    disease_name: typing.Optional[str] = None

class IllnessScriptOutput(BaseModel):
    disease_name: typing.Optional[str] = None
    predisposing_conditions: typing.List[str]
    pathophysiology_summary: typing.Optional[str] = None
    key_symptoms_and_signs: typing.List[str]
    relevant_diagnostics: typing.Optional[typing.List[str]] = None

class InterventionInfo(BaseModel):
    intervention_details: typing.Optional[str] = None
    comparator_details: typing.Optional[str] = None

class KeyResult(BaseModel):
    finding_description: typing.Optional[str] = None
    reported_values: typing.Optional[str] = None

class LabAnalysisInput(BaseModel):
    lab_results: typing.List["LabTestResult"]
    user_role: typing.Optional[types.UserRole] = None
    patient_context: typing.Optional[str] = None
    specific_user_query: typing.Optional[str] = None

class LabInsightsOutput(BaseModel):
    professional_detailed_reasoning_cot: typing.Optional[str] = None
    clinical_summary: typing.Optional[str] = None
    important_results_to_discuss_with_doctor: typing.List[str]

class LabTestResult(BaseModel):
    test_name: typing.Optional[str] = None
    value: typing.Optional[str] = None
    unit: typing.Optional[str] = None
    reference_range_low: typing.Optional[str] = None
    reference_range_high: typing.Optional[str] = None
    interpretation_flag: typing.Optional[str] = None
    notes: typing.Optional[str] = None

class MatrixFeedbackOutput(BaseModel):
    overall_matrix_feedback: typing.Optional[str] = None
    discriminator_feedback: typing.Optional[str] = None
    expert_matrix_analysis: typing.List["ExpertHypothesisFindingAnalysis"]
    expert_recommended_discriminator: typing.Optional[str] = None
    expert_discriminator_rationale: typing.Optional[str] = None
    learning_focus_suggestions: typing.List[str]
    matrix_accuracy_score: typing.Optional[float] = None

class Message(BaseModel):
    role: typing.Optional[typing.Union[str, str]] = None
    content: typing.Optional[str] = None

class PDFAnalysisInput(BaseModel):
    pdf_content: typing.Optional[str] = None
    analysis_focus: typing.Optional[str] = None
    clinical_question: typing.Optional[str] = None

class PDFAnalysisOutput(BaseModel):
    document_type: typing.Optional[str] = None
    key_findings: typing.List[str]
    methodology_summary: typing.Optional[str] = None
    clinical_relevance: typing.Optional[str] = None
    evidence_quality: typing.Optional[str] = None
    recommendations: typing.List[str]
    limitations: typing.List[str]
    structured_summary: typing.Optional[str] = None

class PICOFormulationOutput(BaseModel):
    structured_pico_question: typing.Optional["PICOQuestion"] = None
    structured_question: typing.Optional[str] = None
    explanation: typing.Optional[str] = None
    pico_derivation_reasoning: typing.Optional[str] = None
    search_terms_suggestions: typing.List[str]
    boolean_search_strategies: typing.List[str]
    alternative_pico_formulations: typing.Optional[typing.List[str]] = None
    recommended_study_types: typing.List[str]

class PICOQuestion(BaseModel):
    patient_population: typing.Optional[str] = None
    intervention: typing.Optional[str] = None
    comparison: typing.Optional[str] = None
    outcome: typing.Optional[str] = None
    time_frame: typing.Optional[str] = None
    study_type: typing.Optional[str] = None

class PatientContext(BaseModel):
    diagnosis: typing.Optional[str] = None
    labs: typing.Optional[str] = None
    notes: typing.Optional[str] = None
    medications: typing.Optional[str] = None

class PatientFollowUpChecklistOutput(BaseModel):
    checklist_items: typing.List[str]
    when_to_contact_doctor_urgently: typing.Optional[typing.List[str]] = None
    general_advice: typing.Optional[str] = None

class PatientFollowUpInput(BaseModel):
    consultation_summary_or_concept_explained: typing.Optional[str] = None
    doctor_recommendations_summary: typing.Optional[str] = None

class PlanEvaluationOutputModel(BaseModel):
    plan_strengths: typing.List[str]
    plan_gaps: typing.List[str]
    investigation_priorities: typing.List[str]
    management_considerations: typing.List[str]
    safety_concerns: typing.List[str]
    cost_effectiveness_notes: typing.List[str]
    guidelines_alignment: typing.Optional[str] = None
    next_step_guidance: typing.Optional[str] = None

class PopulationInfo(BaseModel):
    sample_size: typing.Optional[int] = None
    key_demographics: typing.Optional[str] = None
    inclusion_criteria: typing.List[str]
    exclusion_criteria: typing.List[str]

class PracticeRecommendations(BaseModel):
    clinical_application: typing.Optional[str] = None
    monitoring_points: typing.List[str]
    evidence_caveats: typing.Optional[str] = None

class ProbeResponseOutputModel(BaseModel):
    answers_to_questions: typing.List["AnsweredQuestion"]
    additional_considerations: typing.List[str]
    counter_questions: typing.List[str]
    knowledge_gaps_identified: typing.List[str]
    learning_resources: typing.List[str]

class ProblemRepresentationFeedbackOutputModel(BaseModel):
    feedback_strengths: typing.List[str]
    feedback_improvements: typing.List[str]
    missing_elements: typing.List[str]
    overall_assessment: typing.Optional[str] = None
    next_step_guidance: typing.Optional[str] = None
    socratic_questions: typing.List[str]

class ProcessingMetadata(BaseModel):
    total_processing_time_ms: typing.Optional[float] = None
    sources_analyzed: typing.Optional[int] = None
    timestamp: typing.Optional[str] = None
    version: typing.Optional[str] = None

class ProvideSessionSummaryInput(BaseModel):
    session_state: typing.Optional["SessionState"] = None

class QualityFactor(BaseModel):
    id: typing.Optional[str] = None
    factor_name: typing.Optional[str] = None
    assessment: typing.Optional[types.AssessmentValue] = None
    justification: typing.Optional[str] = None

class QualityScores(BaseModel):
    overall_score: typing.Optional[float] = None
    coverage_score: typing.Optional[float] = None
    diversity_score: typing.Optional[float] = None
    recency_score: typing.Optional[float] = None
    impact_score: typing.Optional[float] = None
    source_balance_score: typing.Optional[float] = None

class QuestionCategory(BaseModel):
    category_name: typing.Optional[str] = None
    questions: typing.List[str]
    category_rationale: typing.Optional[str] = None

class RawSearchResultItem(BaseModel):
    source: typing.Optional[types.ResearchSourceType] = None
    title: typing.Optional[str] = None
    url: typing.Optional[str] = None
    snippet_or_abstract: typing.Optional[str] = None
    publication_date: typing.Optional[str] = None
    authors: typing.Optional[typing.List[str]] = None
    journal: typing.Optional[str] = None
    pmid: typing.Optional[str] = None
    doi: typing.Optional[str] = None
    study_type: typing.Optional[str] = None
    citation_count: typing.Optional[int] = None
    relevance_score: typing.Optional[float] = None
    composite_impact_score: typing.Optional[float] = None
    academic_source_name: typing.Optional[str] = None

class ReasoningTag(BaseModel):
    tag: typing.Optional[str] = None
    reference_id: typing.Optional[str] = None

class RecommendationBalance(BaseModel):
    positive_factors: typing.List[str]
    negative_factors: typing.List[str]
    overall_balance: typing.Optional[str] = None
    reasoning_tags: typing.List[str]

class ResearchMetrics(BaseModel):
    total_articles_analyzed: typing.Optional[int] = None
    sources_consulted: typing.List[str]
    search_duration_seconds: typing.Optional[float] = None
    quality_filters_applied: typing.List[str]
    date_range_searched: typing.Optional[str] = None
    language_filters_applied: typing.Optional[typing.List[str]] = None
    search_strategy_summary: typing.Optional[str] = None
    unique_journals_found: typing.Optional[int] = None
    high_impact_studies_count: typing.Optional[int] = None
    recent_studies_count: typing.Optional[int] = None
    systematic_reviews_count: typing.Optional[int] = None
    rct_count: typing.Optional[int] = None
    cite_source_metrics: typing.Optional["CiteSourceMetrics"] = None

class ResearchTaskInput(BaseModel):
    user_original_query: typing.Optional[str] = None
    pico_question: typing.Optional["PICOQuestion"] = None
    research_focus: typing.Optional[str] = None
    target_audience: typing.Optional[str] = None
    research_mode: typing.Optional[str] = None

class SearchParameters(BaseModel):
    source: typing.Optional[types.ResearchSourceType] = None
    query_string: typing.Optional[str] = None
    max_results: typing.Optional[int] = None
    study_type_filter: typing.Optional[types.StudyTypeFilter] = None
    date_range_years: typing.Optional[int] = None
    language_filter: typing.Optional[str] = None
    rationale: typing.Optional[str] = None

class SelfReflectionFeedbackOutput(BaseModel):
    identified_reasoning_pattern: typing.Optional[str] = None
    bias_reflection_points: typing.List["BiasReflectionPoint"]
    devils_advocate_challenge: typing.Optional[str] = None
    suggested_next_reflective_action: typing.Optional[str] = None

class SelfReflectionInput(BaseModel):
    clinical_scenario: typing.Optional[str] = None
    user_hypothesis: typing.Optional[str] = None
    user_reasoning_summary: typing.Optional[str] = None

class SessionState(BaseModel):
    case_context: typing.Optional["CaseContext"] = None
    student_summary: typing.Optional[str] = None
    student_ddx: typing.Optional[typing.List[str]] = None
    student_analysis: typing.Optional[str] = None
    student_probe_questions: typing.Optional[typing.List[str]] = None
    student_management_plan: typing.Optional[str] = None
    student_selected_topic: typing.Optional[str] = None
    feedback_history: typing.List[str]

class SessionSummaryOutputModel(BaseModel):
    overall_performance: typing.Optional[str] = None
    key_strengths: typing.List[str]
    areas_for_development: typing.List[str]
    learning_objectives_met: typing.List[str]
    recommended_study_topics: typing.List[str]
    metacognitive_insights: typing.List[str]
    next_cases_suggestions: typing.List[str]

class SimplifiedQueryOutput(BaseModel):
    simplified_query: typing.Optional[str] = None

class SourceAnalysis(BaseModel):
    source_rankings: typing.List["SourcePerformanceMetrics"]
    coverage_analysis: typing.Optional[str] = None
    diversity_assessment: typing.Optional[str] = None
    performance_insights: typing.List[str]

class SourcePerformanceMetrics(BaseModel):
    source_name: typing.Optional[str] = None
    total_results: typing.Optional[int] = None
    unique_contributions: typing.Optional[int] = None
    quality_score: typing.Optional[float] = None
    response_time_ms: typing.Optional[float] = None
    recent_publications_count: typing.Optional[int] = None
    high_impact_count: typing.Optional[int] = None

class StructuredSummaryOutput(BaseModel):
    one_sentence_summary: typing.Optional[str] = None
    semantic_qualifiers_identified: typing.List[str]
    key_patient_details_abstracted: typing.List[str]
    suggested_areas_for_further_data_gathering: typing.List[str]

class StudentHypothesisAnalysis(BaseModel):
    hypothesis_name: typing.Optional[str] = None
    supporting_findings: typing.List[str]
    refuting_findings: typing.List[str]
    key_discriminators_against_others: typing.List[str]

class SummaryFeedbackOutputModel(BaseModel):
    feedback_strengths: typing.List[str]
    feedback_improvements: typing.List[str]
    missing_elements: typing.List[str]
    overall_assessment: typing.Optional[str] = None
    next_step_guidance: typing.Optional[str] = None
    socratic_questions: typing.List[str]

class SynthesizedResearchOutput(BaseModel):
    original_query: typing.Optional[str] = None
    executive_summary: typing.Optional[str] = None
    professional_detailed_reasoning_cot: typing.Optional[str] = None
    clinical_implications: typing.List[str]
    key_findings_by_theme: typing.List["EvidenceTheme"]
    research_gaps_identified: typing.List[str]
    evidence_quality_assessment: typing.Optional[str] = None
    relevant_references: typing.List["RawSearchResultItem"]
    research_metrics: typing.Optional["ResearchMetrics"] = None
    search_duration_seconds: typing.Optional[float] = None

class TranslationOutput(BaseModel):
    translated_text: typing.Optional[str] = None

class VisualDataSummary(BaseModel):
    chart_data_available: typing.Optional[bool] = None
    supported_visualizations: typing.List[str]
    data_summary: typing.Optional[str] = None

# #########################################################################
# Generated type aliases (0)
# #########################################################################
