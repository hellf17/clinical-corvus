# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
import baml_py

from . import stream_types, types, type_builder
from .parser import LlmResponseParser, LlmStreamParser
from .runtime import DoNotUseDirectlyCallManager, BamlCallOptions
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME as __runtime__


class BamlAsyncClient:
    __options: DoNotUseDirectlyCallManager
    __stream_client: "BamlStreamClient"
    __http_request: "BamlHttpRequestClient"
    __http_stream_request: "BamlHttpStreamRequestClient"
    __llm_response_parser: LlmResponseParser
    __llm_stream_parser: LlmStreamParser

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options
        self.__stream_client = BamlStreamClient(options)
        self.__http_request = BamlHttpRequestClient(options)
        self.__http_stream_request = BamlHttpStreamRequestClient(options)
        self.__llm_response_parser = LlmResponseParser(options)
        self.__llm_stream_parser = LlmStreamParser(options)

    def with_options(self,
        tb: typing.Optional[type_builder.TypeBuilder] = None,
        client_registry: typing.Optional[baml_py.baml_py.ClientRegistry] = None,
        collector: typing.Optional[typing.Union[baml_py.baml_py.Collector, typing.List[baml_py.baml_py.Collector]]] = None,
        env: typing.Optional[typing.Dict[str, typing.Optional[str]]] = None,
    ) -> "BamlAsyncClient":
        options: BamlCallOptions = {}
        if tb is not None:
            options["tb"] = tb
        if client_registry is not None:
            options["client_registry"] = client_registry
        if collector is not None:
            options["collector"] = collector
        if env is not None:
            options["env"] = env
        return BamlAsyncClient(self.__options.merge_options(options))

    @property
    def stream(self):
      return self.__stream_client

    @property
    def request(self):
      return self.__http_request

    @property
    def stream_request(self):
      return self.__http_stream_request

    @property
    def parse(self):
      return self.__llm_response_parser

    @property
    def parse_stream(self):
      return self.__llm_stream_parser
    
    async def AnalyzeCiteSourceResults(self, input: types.CiteSourceAnalysisInput,
        baml_options: BamlCallOptions = {},
    ) -> types.CiteSourceAnalysisOutput:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="AnalyzeCiteSourceResults", args={
            "input": input,
        })
        return typing.cast(types.CiteSourceAnalysisOutput, result.cast_to(types, types, stream_types, False, __runtime__))
    async def AnalyzeClinicalQuery(self, query: str,
        baml_options: BamlCallOptions = {},
    ) -> types.ClinicalQueryAnalysis:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="AnalyzeClinicalQuery", args={
            "query": query,
        })
        return typing.cast(types.ClinicalQueryAnalysis, result.cast_to(types, types, stream_types, False, __runtime__))
    async def AnalyzeDifferentialDiagnoses_SNAPPS(self, input: types.AnalyzeDDxInput,
        baml_options: BamlCallOptions = {},
    ) -> types.DifferentialAnalysisOutputModel:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="AnalyzeDifferentialDiagnoses_SNAPPS", args={
            "input": input,
        })
        return typing.cast(types.DifferentialAnalysisOutputModel, result.cast_to(types, types, stream_types, False, __runtime__))
    async def AnalyzeMedicalPaper(self, paper_text: str,text_type: types.TextType,clinical_question: typing.Optional[str] = None,source_type: typing.Optional[str] = None,publication_year: typing.Optional[int] = None,
        baml_options: BamlCallOptions = {},
    ) -> types.EvidenceAnalysisData:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="AnalyzeMedicalPaper", args={
            "paper_text": paper_text,"text_type": text_type,"clinical_question": clinical_question,"source_type": source_type,"publication_year": publication_year,
        })
        return typing.cast(types.EvidenceAnalysisData, result.cast_to(types, types, stream_types, False, __runtime__))
    async def AnalyzePDFDocument(self, input: types.PDFAnalysisInput,
        baml_options: BamlCallOptions = {},
    ) -> types.PDFAnalysisOutput:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="AnalyzePDFDocument", args={
            "input": input,
        })
        return typing.cast(types.PDFAnalysisOutput, result.cast_to(types, types, stream_types, False, __runtime__))
    async def AnswerProbeQuestions_SNAPPS(self, input: types.AnswerProbeQuestionsInput,
        baml_options: BamlCallOptions = {},
    ) -> types.ProbeResponseOutputModel:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="AnswerProbeQuestions_SNAPPS", args={
            "input": input,
        })
        return typing.cast(types.ProbeResponseOutputModel, result.cast_to(types, types, stream_types, False, __runtime__))
    async def AssistInIdentifyingCognitiveBiases(self, input: types.CognitiveBiasInput,
        baml_options: BamlCallOptions = {},
    ) -> types.CognitiveBiasReflectionOutput:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="AssistInIdentifyingCognitiveBiases", args={
            "input": input,
        })
        return typing.cast(types.CognitiveBiasReflectionOutput, result.cast_to(types, types, stream_types, False, __runtime__))
    async def BatchTranslateToEnglish(self, inputs: typing.List[str],
        baml_options: BamlCallOptions = {},
    ) -> types.BatchTranslationOutput:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="BatchTranslateToEnglish", args={
            "inputs": inputs,
        })
        return typing.cast(types.BatchTranslationOutput, result.cast_to(types, types, stream_types, False, __runtime__))
    async def BatchTranslateToPortuguese(self, inputs: typing.List[str],
        baml_options: BamlCallOptions = {},
    ) -> types.BatchTranslationOutput:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="BatchTranslateToPortuguese", args={
            "inputs": inputs,
        })
        return typing.cast(types.BatchTranslationOutput, result.cast_to(types, types, stream_types, False, __runtime__))
    async def EvaluateManagementPlan_SNAPPS(self, input: types.EvaluateManagementPlanInput,
        baml_options: BamlCallOptions = {},
    ) -> types.PlanEvaluationOutputModel:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="EvaluateManagementPlan_SNAPPS", args={
            "input": input,
        })
        return typing.cast(types.PlanEvaluationOutputModel, result.cast_to(types, types, stream_types, False, __runtime__))
    async def EvaluateSummary_SNAPPS(self, input: types.EvaluateSummaryInput,
        baml_options: BamlCallOptions = {},
    ) -> types.SummaryFeedbackOutputModel:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="EvaluateSummary_SNAPPS", args={
            "input": input,
        })
        return typing.cast(types.SummaryFeedbackOutputModel, result.cast_to(types, types, stream_types, False, __runtime__))
    async def ExpandDifferentialDiagnosis(self, input: types.ExpandDifferentialDiagnosisInput,
        baml_options: BamlCallOptions = {},
    ) -> types.ExpandedDdxOutput:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="ExpandDifferentialDiagnosis", args={
            "input": input,
        })
        return typing.cast(types.ExpandedDdxOutput, result.cast_to(types, types, stream_types, False, __runtime__))
    async def ExtractPubMedKeywords(self, complex_query: str,
        baml_options: BamlCallOptions = {},
    ) -> types.SimplifiedQueryOutput:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="ExtractPubMedKeywords", args={
            "complex_query": complex_query,
        })
        return typing.cast(types.SimplifiedQueryOutput, result.cast_to(types, types, stream_types, False, __runtime__))
    async def FacilitateDDxAnalysis_SNAPPS(self, input: types.FacilitateDDxAnalysisInput,
        baml_options: BamlCallOptions = {},
    ) -> types.FacilitateDDxAnalysisOutputModel:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="FacilitateDDxAnalysis_SNAPPS", args={
            "input": input,
        })
        return typing.cast(types.FacilitateDDxAnalysisOutputModel, result.cast_to(types, types, stream_types, False, __runtime__))
    async def FallbackTranslateToEnglish(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> types.TranslationOutput:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="FallbackTranslateToEnglish", args={
            "input": input,
        })
        return typing.cast(types.TranslationOutput, result.cast_to(types, types, stream_types, False, __runtime__))
    async def FallbackTranslateToPortuguese(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> types.TranslationOutput:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="FallbackTranslateToPortuguese", args={
            "input": input,
        })
        return typing.cast(types.TranslationOutput, result.cast_to(types, types, stream_types, False, __runtime__))
    async def FormulateDeepResearchStrategy(self, input: types.ResearchTaskInput,
        baml_options: BamlCallOptions = {},
    ) -> types.FormulatedSearchStrategyOutput:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="FormulateDeepResearchStrategy", args={
            "input": input,
        })
        return typing.cast(types.FormulatedSearchStrategyOutput, result.cast_to(types, types, stream_types, False, __runtime__))
    async def FormulateEvidenceBasedPICOQuestion(self, input: types.ClinicalScenarioInput,
        baml_options: BamlCallOptions = {},
    ) -> types.PICOFormulationOutput:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="FormulateEvidenceBasedPICOQuestion", args={
            "input": input,
        })
        return typing.cast(types.PICOFormulationOutput, result.cast_to(types, types, stream_types, False, __runtime__))
    async def GenerateCiteSourceReport(self, input: types.CiteSourceReportInput,
        baml_options: BamlCallOptions = {},
    ) -> types.CiteSourceReportOutput:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="GenerateCiteSourceReport", args={
            "input": input,
        })
        return typing.cast(types.CiteSourceReportOutput, result.cast_to(types, types, stream_types, False, __runtime__))
    async def GenerateClinicalWorkflowQuestions(self, input: types.DdxQuestioningInput,
        baml_options: BamlCallOptions = {},
    ) -> types.ClinicalWorkflowQuestionsOutput:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="GenerateClinicalWorkflowQuestions", args={
            "input": input,
        })
        return typing.cast(types.ClinicalWorkflowQuestionsOutput, result.cast_to(types, types, stream_types, False, __runtime__))
    async def GenerateDiagnosticTimeout(self, input: types.DiagnosticTimeoutInput,
        baml_options: BamlCallOptions = {},
    ) -> types.DiagnosticTimeoutOutput:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="GenerateDiagnosticTimeout", args={
            "input": input,
        })
        return typing.cast(types.DiagnosticTimeoutOutput, result.cast_to(types, types, stream_types, False, __runtime__))
    async def GenerateDrCorvusInsights(self, input: types.LabAnalysisInput,
        baml_options: BamlCallOptions = {},
    ) -> types.LabInsightsOutput:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="GenerateDrCorvusInsights", args={
            "input": input,
        })
        return typing.cast(types.LabInsightsOutput, result.cast_to(types, types, stream_types, False, __runtime__))
    async def GenerateEvidenceAppraisal(self, extracted_data: types.EvidenceAnalysisData,clinical_question: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> types.EvidenceAppraisalOutput:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="GenerateEvidenceAppraisal", args={
            "extracted_data": extracted_data,"clinical_question": clinical_question,
        })
        return typing.cast(types.EvidenceAppraisalOutput, result.cast_to(types, types, stream_types, False, __runtime__))
    async def GenerateIllnessScript(self, input: types.IllnessScriptInput,
        baml_options: BamlCallOptions = {},
    ) -> types.IllnessScriptOutput:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="GenerateIllnessScript", args={
            "input": input,
        })
        return typing.cast(types.IllnessScriptOutput, result.cast_to(types, types, stream_types, False, __runtime__))
    async def OptimizeSearchStrategy(self, query: str,cite_source_metrics: types.CiteSourceMetrics,
        baml_options: BamlCallOptions = {},
    ) -> types.FormulatedSearchStrategyOutput:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="OptimizeSearchStrategy", args={
            "query": query,"cite_source_metrics": cite_source_metrics,
        })
        return typing.cast(types.FormulatedSearchStrategyOutput, result.cast_to(types, types, stream_types, False, __runtime__))
    async def ProvideCompareContrastFeedback(self, input: types.CompareContrastExerciseInput,
        baml_options: BamlCallOptions = {},
    ) -> types.CompareContrastFeedbackOutput:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="ProvideCompareContrastFeedback", args={
            "input": input,
        })
        return typing.cast(types.CompareContrastFeedbackOutput, result.cast_to(types, types, stream_types, False, __runtime__))
    async def ProvideFeedbackOnProblemRepresentation(self, input: types.BAMLProblemRepresentationInput,
        baml_options: BamlCallOptions = {},
    ) -> types.ProblemRepresentationFeedbackOutputModel:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="ProvideFeedbackOnProblemRepresentation", args={
            "input": input,
        })
        return typing.cast(types.ProblemRepresentationFeedbackOutputModel, result.cast_to(types, types, stream_types, False, __runtime__))
    async def ProvideMatrixFeedback(self, input: types.CompareContrastMatrixInput,
        baml_options: BamlCallOptions = {},
    ) -> types.MatrixFeedbackOutput:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="ProvideMatrixFeedback", args={
            "input": input,
        })
        return typing.cast(types.MatrixFeedbackOutput, result.cast_to(types, types, stream_types, False, __runtime__))
    async def ProvideSelfReflectionFeedback(self, input: types.SelfReflectionInput,
        baml_options: BamlCallOptions = {},
    ) -> types.SelfReflectionFeedbackOutput:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="ProvideSelfReflectionFeedback", args={
            "input": input,
        })
        return typing.cast(types.SelfReflectionFeedbackOutput, result.cast_to(types, types, stream_types, False, __runtime__))
    async def ProvideSessionSummary_SNAPPS(self, input: types.ProvideSessionSummaryInput,
        baml_options: BamlCallOptions = {},
    ) -> types.SessionSummaryOutputModel:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="ProvideSessionSummary_SNAPPS", args={
            "input": input,
        })
        return typing.cast(types.SessionSummaryOutputModel, result.cast_to(types, types, stream_types, False, __runtime__))
    async def QuickClinicalChat(self, history: typing.List["types.Message"],context: typing.Optional["types.PatientContext"] = None,
        baml_options: BamlCallOptions = {},
    ) -> types.ChatResponse:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="QuickClinicalChat", args={
            "history": history,"context": context,
        })
        return typing.cast(types.ChatResponse, result.cast_to(types, types, stream_types, False, __runtime__))
    async def SuggestPatientFriendlyFollowUpChecklist(self, input: types.PatientFollowUpInput,
        baml_options: BamlCallOptions = {},
    ) -> types.PatientFollowUpChecklistOutput:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="SuggestPatientFriendlyFollowUpChecklist", args={
            "input": input,
        })
        return typing.cast(types.PatientFollowUpChecklistOutput, result.cast_to(types, types, stream_types, False, __runtime__))
    async def SummarizeAndStructureClinicalData(self, input: types.ClinicalDataInput,
        baml_options: BamlCallOptions = {},
    ) -> types.StructuredSummaryOutput:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="SummarizeAndStructureClinicalData", args={
            "input": input,
        })
        return typing.cast(types.StructuredSummaryOutput, result.cast_to(types, types, stream_types, False, __runtime__))
    async def SynthesizeDeepResearch(self, original_query: str,search_results: typing.List["types.RawSearchResultItem"],
        baml_options: BamlCallOptions = {},
    ) -> types.SynthesizedResearchOutput:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="SynthesizeDeepResearch", args={
            "original_query": original_query,"search_results": search_results,
        })
        return typing.cast(types.SynthesizedResearchOutput, result.cast_to(types, types, stream_types, False, __runtime__))
    async def SynthesizeDeepResearchMinimal(self, original_query: str,search_results: typing.List["types.RawSearchResultItem"],
        baml_options: BamlCallOptions = {},
    ) -> types.SynthesizedResearchOutput:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="SynthesizeDeepResearchMinimal", args={
            "original_query": original_query,"search_results": search_results,
        })
        return typing.cast(types.SynthesizedResearchOutput, result.cast_to(types, types, stream_types, False, __runtime__))
    async def SynthesizeDeepResearchSimple(self, original_query: str,search_results: typing.List["types.RawSearchResultItem"],
        baml_options: BamlCallOptions = {},
    ) -> types.SynthesizedResearchOutput:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="SynthesizeDeepResearchSimple", args={
            "original_query": original_query,"search_results": search_results,
        })
        return typing.cast(types.SynthesizedResearchOutput, result.cast_to(types, types, stream_types, False, __runtime__))
    async def TeachQuestionPrioritization(self, input: types.DdxQuestioningInput,
        baml_options: BamlCallOptions = {},
    ) -> types.DdxQuestioningOutput:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="TeachQuestionPrioritization", args={
            "input": input,
        })
        return typing.cast(types.DdxQuestioningOutput, result.cast_to(types, types, stream_types, False, __runtime__))
    async def TranslateToEnglish(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> types.TranslationOutput:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="TranslateToEnglish", args={
            "input": input,
        })
        return typing.cast(types.TranslationOutput, result.cast_to(types, types, stream_types, False, __runtime__))
    async def TranslateToPortuguese(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> types.TranslationOutput:
        result = await self.__options.merge_options(baml_options).call_function_async(function_name="TranslateToPortuguese", args={
            "input": input,
        })
        return typing.cast(types.TranslationOutput, result.cast_to(types, types, stream_types, False, __runtime__))
    


class BamlStreamClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def AnalyzeCiteSourceResults(self, input: types.CiteSourceAnalysisInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.CiteSourceAnalysisOutput, types.CiteSourceAnalysisOutput]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="AnalyzeCiteSourceResults", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.CiteSourceAnalysisOutput, types.CiteSourceAnalysisOutput](
          result,
          lambda x: typing.cast(stream_types.CiteSourceAnalysisOutput, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.CiteSourceAnalysisOutput, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def AnalyzeClinicalQuery(self, query: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.ClinicalQueryAnalysis, types.ClinicalQueryAnalysis]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="AnalyzeClinicalQuery", args={
            "query": query,
        })
        return baml_py.BamlStream[stream_types.ClinicalQueryAnalysis, types.ClinicalQueryAnalysis](
          result,
          lambda x: typing.cast(stream_types.ClinicalQueryAnalysis, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.ClinicalQueryAnalysis, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def AnalyzeDifferentialDiagnoses_SNAPPS(self, input: types.AnalyzeDDxInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.DifferentialAnalysisOutputModel, types.DifferentialAnalysisOutputModel]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="AnalyzeDifferentialDiagnoses_SNAPPS", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.DifferentialAnalysisOutputModel, types.DifferentialAnalysisOutputModel](
          result,
          lambda x: typing.cast(stream_types.DifferentialAnalysisOutputModel, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.DifferentialAnalysisOutputModel, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def AnalyzeMedicalPaper(self, paper_text: str,text_type: types.TextType,clinical_question: typing.Optional[str] = None,source_type: typing.Optional[str] = None,publication_year: typing.Optional[int] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.EvidenceAnalysisData, types.EvidenceAnalysisData]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="AnalyzeMedicalPaper", args={
            "paper_text": paper_text,"text_type": text_type,"clinical_question": clinical_question,"source_type": source_type,"publication_year": publication_year,
        })
        return baml_py.BamlStream[stream_types.EvidenceAnalysisData, types.EvidenceAnalysisData](
          result,
          lambda x: typing.cast(stream_types.EvidenceAnalysisData, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.EvidenceAnalysisData, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def AnalyzePDFDocument(self, input: types.PDFAnalysisInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.PDFAnalysisOutput, types.PDFAnalysisOutput]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="AnalyzePDFDocument", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.PDFAnalysisOutput, types.PDFAnalysisOutput](
          result,
          lambda x: typing.cast(stream_types.PDFAnalysisOutput, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.PDFAnalysisOutput, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def AnswerProbeQuestions_SNAPPS(self, input: types.AnswerProbeQuestionsInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.ProbeResponseOutputModel, types.ProbeResponseOutputModel]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="AnswerProbeQuestions_SNAPPS", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.ProbeResponseOutputModel, types.ProbeResponseOutputModel](
          result,
          lambda x: typing.cast(stream_types.ProbeResponseOutputModel, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.ProbeResponseOutputModel, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def AssistInIdentifyingCognitiveBiases(self, input: types.CognitiveBiasInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.CognitiveBiasReflectionOutput, types.CognitiveBiasReflectionOutput]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="AssistInIdentifyingCognitiveBiases", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.CognitiveBiasReflectionOutput, types.CognitiveBiasReflectionOutput](
          result,
          lambda x: typing.cast(stream_types.CognitiveBiasReflectionOutput, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.CognitiveBiasReflectionOutput, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def BatchTranslateToEnglish(self, inputs: typing.List[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.BatchTranslationOutput, types.BatchTranslationOutput]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="BatchTranslateToEnglish", args={
            "inputs": inputs,
        })
        return baml_py.BamlStream[stream_types.BatchTranslationOutput, types.BatchTranslationOutput](
          result,
          lambda x: typing.cast(stream_types.BatchTranslationOutput, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.BatchTranslationOutput, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def BatchTranslateToPortuguese(self, inputs: typing.List[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.BatchTranslationOutput, types.BatchTranslationOutput]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="BatchTranslateToPortuguese", args={
            "inputs": inputs,
        })
        return baml_py.BamlStream[stream_types.BatchTranslationOutput, types.BatchTranslationOutput](
          result,
          lambda x: typing.cast(stream_types.BatchTranslationOutput, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.BatchTranslationOutput, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def EvaluateManagementPlan_SNAPPS(self, input: types.EvaluateManagementPlanInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.PlanEvaluationOutputModel, types.PlanEvaluationOutputModel]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="EvaluateManagementPlan_SNAPPS", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.PlanEvaluationOutputModel, types.PlanEvaluationOutputModel](
          result,
          lambda x: typing.cast(stream_types.PlanEvaluationOutputModel, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.PlanEvaluationOutputModel, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def EvaluateSummary_SNAPPS(self, input: types.EvaluateSummaryInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.SummaryFeedbackOutputModel, types.SummaryFeedbackOutputModel]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="EvaluateSummary_SNAPPS", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.SummaryFeedbackOutputModel, types.SummaryFeedbackOutputModel](
          result,
          lambda x: typing.cast(stream_types.SummaryFeedbackOutputModel, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.SummaryFeedbackOutputModel, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def ExpandDifferentialDiagnosis(self, input: types.ExpandDifferentialDiagnosisInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.ExpandedDdxOutput, types.ExpandedDdxOutput]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="ExpandDifferentialDiagnosis", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.ExpandedDdxOutput, types.ExpandedDdxOutput](
          result,
          lambda x: typing.cast(stream_types.ExpandedDdxOutput, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.ExpandedDdxOutput, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def ExtractPubMedKeywords(self, complex_query: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.SimplifiedQueryOutput, types.SimplifiedQueryOutput]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="ExtractPubMedKeywords", args={
            "complex_query": complex_query,
        })
        return baml_py.BamlStream[stream_types.SimplifiedQueryOutput, types.SimplifiedQueryOutput](
          result,
          lambda x: typing.cast(stream_types.SimplifiedQueryOutput, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.SimplifiedQueryOutput, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def FacilitateDDxAnalysis_SNAPPS(self, input: types.FacilitateDDxAnalysisInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.FacilitateDDxAnalysisOutputModel, types.FacilitateDDxAnalysisOutputModel]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="FacilitateDDxAnalysis_SNAPPS", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.FacilitateDDxAnalysisOutputModel, types.FacilitateDDxAnalysisOutputModel](
          result,
          lambda x: typing.cast(stream_types.FacilitateDDxAnalysisOutputModel, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.FacilitateDDxAnalysisOutputModel, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def FallbackTranslateToEnglish(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.TranslationOutput, types.TranslationOutput]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="FallbackTranslateToEnglish", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.TranslationOutput, types.TranslationOutput](
          result,
          lambda x: typing.cast(stream_types.TranslationOutput, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.TranslationOutput, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def FallbackTranslateToPortuguese(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.TranslationOutput, types.TranslationOutput]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="FallbackTranslateToPortuguese", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.TranslationOutput, types.TranslationOutput](
          result,
          lambda x: typing.cast(stream_types.TranslationOutput, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.TranslationOutput, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def FormulateDeepResearchStrategy(self, input: types.ResearchTaskInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.FormulatedSearchStrategyOutput, types.FormulatedSearchStrategyOutput]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="FormulateDeepResearchStrategy", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.FormulatedSearchStrategyOutput, types.FormulatedSearchStrategyOutput](
          result,
          lambda x: typing.cast(stream_types.FormulatedSearchStrategyOutput, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.FormulatedSearchStrategyOutput, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def FormulateEvidenceBasedPICOQuestion(self, input: types.ClinicalScenarioInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.PICOFormulationOutput, types.PICOFormulationOutput]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="FormulateEvidenceBasedPICOQuestion", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.PICOFormulationOutput, types.PICOFormulationOutput](
          result,
          lambda x: typing.cast(stream_types.PICOFormulationOutput, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.PICOFormulationOutput, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def GenerateCiteSourceReport(self, input: types.CiteSourceReportInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.CiteSourceReportOutput, types.CiteSourceReportOutput]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="GenerateCiteSourceReport", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.CiteSourceReportOutput, types.CiteSourceReportOutput](
          result,
          lambda x: typing.cast(stream_types.CiteSourceReportOutput, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.CiteSourceReportOutput, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def GenerateClinicalWorkflowQuestions(self, input: types.DdxQuestioningInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.ClinicalWorkflowQuestionsOutput, types.ClinicalWorkflowQuestionsOutput]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="GenerateClinicalWorkflowQuestions", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.ClinicalWorkflowQuestionsOutput, types.ClinicalWorkflowQuestionsOutput](
          result,
          lambda x: typing.cast(stream_types.ClinicalWorkflowQuestionsOutput, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.ClinicalWorkflowQuestionsOutput, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def GenerateDiagnosticTimeout(self, input: types.DiagnosticTimeoutInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.DiagnosticTimeoutOutput, types.DiagnosticTimeoutOutput]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="GenerateDiagnosticTimeout", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.DiagnosticTimeoutOutput, types.DiagnosticTimeoutOutput](
          result,
          lambda x: typing.cast(stream_types.DiagnosticTimeoutOutput, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.DiagnosticTimeoutOutput, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def GenerateDrCorvusInsights(self, input: types.LabAnalysisInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.LabInsightsOutput, types.LabInsightsOutput]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="GenerateDrCorvusInsights", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.LabInsightsOutput, types.LabInsightsOutput](
          result,
          lambda x: typing.cast(stream_types.LabInsightsOutput, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.LabInsightsOutput, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def GenerateEvidenceAppraisal(self, extracted_data: types.EvidenceAnalysisData,clinical_question: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.EvidenceAppraisalOutput, types.EvidenceAppraisalOutput]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="GenerateEvidenceAppraisal", args={
            "extracted_data": extracted_data,"clinical_question": clinical_question,
        })
        return baml_py.BamlStream[stream_types.EvidenceAppraisalOutput, types.EvidenceAppraisalOutput](
          result,
          lambda x: typing.cast(stream_types.EvidenceAppraisalOutput, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.EvidenceAppraisalOutput, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def GenerateIllnessScript(self, input: types.IllnessScriptInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.IllnessScriptOutput, types.IllnessScriptOutput]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="GenerateIllnessScript", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.IllnessScriptOutput, types.IllnessScriptOutput](
          result,
          lambda x: typing.cast(stream_types.IllnessScriptOutput, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.IllnessScriptOutput, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def OptimizeSearchStrategy(self, query: str,cite_source_metrics: types.CiteSourceMetrics,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.FormulatedSearchStrategyOutput, types.FormulatedSearchStrategyOutput]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="OptimizeSearchStrategy", args={
            "query": query,"cite_source_metrics": cite_source_metrics,
        })
        return baml_py.BamlStream[stream_types.FormulatedSearchStrategyOutput, types.FormulatedSearchStrategyOutput](
          result,
          lambda x: typing.cast(stream_types.FormulatedSearchStrategyOutput, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.FormulatedSearchStrategyOutput, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def ProvideCompareContrastFeedback(self, input: types.CompareContrastExerciseInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.CompareContrastFeedbackOutput, types.CompareContrastFeedbackOutput]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="ProvideCompareContrastFeedback", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.CompareContrastFeedbackOutput, types.CompareContrastFeedbackOutput](
          result,
          lambda x: typing.cast(stream_types.CompareContrastFeedbackOutput, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.CompareContrastFeedbackOutput, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def ProvideFeedbackOnProblemRepresentation(self, input: types.BAMLProblemRepresentationInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.ProblemRepresentationFeedbackOutputModel, types.ProblemRepresentationFeedbackOutputModel]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="ProvideFeedbackOnProblemRepresentation", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.ProblemRepresentationFeedbackOutputModel, types.ProblemRepresentationFeedbackOutputModel](
          result,
          lambda x: typing.cast(stream_types.ProblemRepresentationFeedbackOutputModel, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.ProblemRepresentationFeedbackOutputModel, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def ProvideMatrixFeedback(self, input: types.CompareContrastMatrixInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.MatrixFeedbackOutput, types.MatrixFeedbackOutput]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="ProvideMatrixFeedback", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.MatrixFeedbackOutput, types.MatrixFeedbackOutput](
          result,
          lambda x: typing.cast(stream_types.MatrixFeedbackOutput, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.MatrixFeedbackOutput, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def ProvideSelfReflectionFeedback(self, input: types.SelfReflectionInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.SelfReflectionFeedbackOutput, types.SelfReflectionFeedbackOutput]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="ProvideSelfReflectionFeedback", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.SelfReflectionFeedbackOutput, types.SelfReflectionFeedbackOutput](
          result,
          lambda x: typing.cast(stream_types.SelfReflectionFeedbackOutput, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.SelfReflectionFeedbackOutput, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def ProvideSessionSummary_SNAPPS(self, input: types.ProvideSessionSummaryInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.SessionSummaryOutputModel, types.SessionSummaryOutputModel]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="ProvideSessionSummary_SNAPPS", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.SessionSummaryOutputModel, types.SessionSummaryOutputModel](
          result,
          lambda x: typing.cast(stream_types.SessionSummaryOutputModel, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.SessionSummaryOutputModel, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def QuickClinicalChat(self, history: typing.List["types.Message"],context: typing.Optional["types.PatientContext"] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.ChatResponse, types.ChatResponse]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="QuickClinicalChat", args={
            "history": history,"context": context,
        })
        return baml_py.BamlStream[stream_types.ChatResponse, types.ChatResponse](
          result,
          lambda x: typing.cast(stream_types.ChatResponse, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.ChatResponse, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def SuggestPatientFriendlyFollowUpChecklist(self, input: types.PatientFollowUpInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.PatientFollowUpChecklistOutput, types.PatientFollowUpChecklistOutput]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="SuggestPatientFriendlyFollowUpChecklist", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.PatientFollowUpChecklistOutput, types.PatientFollowUpChecklistOutput](
          result,
          lambda x: typing.cast(stream_types.PatientFollowUpChecklistOutput, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.PatientFollowUpChecklistOutput, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def SummarizeAndStructureClinicalData(self, input: types.ClinicalDataInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.StructuredSummaryOutput, types.StructuredSummaryOutput]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="SummarizeAndStructureClinicalData", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.StructuredSummaryOutput, types.StructuredSummaryOutput](
          result,
          lambda x: typing.cast(stream_types.StructuredSummaryOutput, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.StructuredSummaryOutput, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def SynthesizeDeepResearch(self, original_query: str,search_results: typing.List["types.RawSearchResultItem"],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.SynthesizedResearchOutput, types.SynthesizedResearchOutput]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="SynthesizeDeepResearch", args={
            "original_query": original_query,"search_results": search_results,
        })
        return baml_py.BamlStream[stream_types.SynthesizedResearchOutput, types.SynthesizedResearchOutput](
          result,
          lambda x: typing.cast(stream_types.SynthesizedResearchOutput, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.SynthesizedResearchOutput, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def SynthesizeDeepResearchMinimal(self, original_query: str,search_results: typing.List["types.RawSearchResultItem"],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.SynthesizedResearchOutput, types.SynthesizedResearchOutput]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="SynthesizeDeepResearchMinimal", args={
            "original_query": original_query,"search_results": search_results,
        })
        return baml_py.BamlStream[stream_types.SynthesizedResearchOutput, types.SynthesizedResearchOutput](
          result,
          lambda x: typing.cast(stream_types.SynthesizedResearchOutput, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.SynthesizedResearchOutput, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def SynthesizeDeepResearchSimple(self, original_query: str,search_results: typing.List["types.RawSearchResultItem"],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.SynthesizedResearchOutput, types.SynthesizedResearchOutput]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="SynthesizeDeepResearchSimple", args={
            "original_query": original_query,"search_results": search_results,
        })
        return baml_py.BamlStream[stream_types.SynthesizedResearchOutput, types.SynthesizedResearchOutput](
          result,
          lambda x: typing.cast(stream_types.SynthesizedResearchOutput, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.SynthesizedResearchOutput, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TeachQuestionPrioritization(self, input: types.DdxQuestioningInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.DdxQuestioningOutput, types.DdxQuestioningOutput]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TeachQuestionPrioritization", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.DdxQuestioningOutput, types.DdxQuestioningOutput](
          result,
          lambda x: typing.cast(stream_types.DdxQuestioningOutput, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.DdxQuestioningOutput, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TranslateToEnglish(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.TranslationOutput, types.TranslationOutput]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TranslateToEnglish", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.TranslationOutput, types.TranslationOutput](
          result,
          lambda x: typing.cast(stream_types.TranslationOutput, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.TranslationOutput, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    def TranslateToPortuguese(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[stream_types.TranslationOutput, types.TranslationOutput]:
        ctx, result = self.__options.merge_options(baml_options).create_async_stream(function_name="TranslateToPortuguese", args={
            "input": input,
        })
        return baml_py.BamlStream[stream_types.TranslationOutput, types.TranslationOutput](
          result,
          lambda x: typing.cast(stream_types.TranslationOutput, x.cast_to(types, types, stream_types, True, __runtime__)),
          lambda x: typing.cast(types.TranslationOutput, x.cast_to(types, types, stream_types, False, __runtime__)),
          ctx,
        )
    

class BamlHttpRequestClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    async def AnalyzeCiteSourceResults(self, input: types.CiteSourceAnalysisInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzeCiteSourceResults", args={
            "input": input,
        }, mode="request")
        return result
    async def AnalyzeClinicalQuery(self, query: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzeClinicalQuery", args={
            "query": query,
        }, mode="request")
        return result
    async def AnalyzeDifferentialDiagnoses_SNAPPS(self, input: types.AnalyzeDDxInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzeDifferentialDiagnoses_SNAPPS", args={
            "input": input,
        }, mode="request")
        return result
    async def AnalyzeMedicalPaper(self, paper_text: str,text_type: types.TextType,clinical_question: typing.Optional[str] = None,source_type: typing.Optional[str] = None,publication_year: typing.Optional[int] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzeMedicalPaper", args={
            "paper_text": paper_text,"text_type": text_type,"clinical_question": clinical_question,"source_type": source_type,"publication_year": publication_year,
        }, mode="request")
        return result
    async def AnalyzePDFDocument(self, input: types.PDFAnalysisInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzePDFDocument", args={
            "input": input,
        }, mode="request")
        return result
    async def AnswerProbeQuestions_SNAPPS(self, input: types.AnswerProbeQuestionsInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnswerProbeQuestions_SNAPPS", args={
            "input": input,
        }, mode="request")
        return result
    async def AssistInIdentifyingCognitiveBiases(self, input: types.CognitiveBiasInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AssistInIdentifyingCognitiveBiases", args={
            "input": input,
        }, mode="request")
        return result
    async def BatchTranslateToEnglish(self, inputs: typing.List[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="BatchTranslateToEnglish", args={
            "inputs": inputs,
        }, mode="request")
        return result
    async def BatchTranslateToPortuguese(self, inputs: typing.List[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="BatchTranslateToPortuguese", args={
            "inputs": inputs,
        }, mode="request")
        return result
    async def EvaluateManagementPlan_SNAPPS(self, input: types.EvaluateManagementPlanInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="EvaluateManagementPlan_SNAPPS", args={
            "input": input,
        }, mode="request")
        return result
    async def EvaluateSummary_SNAPPS(self, input: types.EvaluateSummaryInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="EvaluateSummary_SNAPPS", args={
            "input": input,
        }, mode="request")
        return result
    async def ExpandDifferentialDiagnosis(self, input: types.ExpandDifferentialDiagnosisInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="ExpandDifferentialDiagnosis", args={
            "input": input,
        }, mode="request")
        return result
    async def ExtractPubMedKeywords(self, complex_query: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="ExtractPubMedKeywords", args={
            "complex_query": complex_query,
        }, mode="request")
        return result
    async def FacilitateDDxAnalysis_SNAPPS(self, input: types.FacilitateDDxAnalysisInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="FacilitateDDxAnalysis_SNAPPS", args={
            "input": input,
        }, mode="request")
        return result
    async def FallbackTranslateToEnglish(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="FallbackTranslateToEnglish", args={
            "input": input,
        }, mode="request")
        return result
    async def FallbackTranslateToPortuguese(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="FallbackTranslateToPortuguese", args={
            "input": input,
        }, mode="request")
        return result
    async def FormulateDeepResearchStrategy(self, input: types.ResearchTaskInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="FormulateDeepResearchStrategy", args={
            "input": input,
        }, mode="request")
        return result
    async def FormulateEvidenceBasedPICOQuestion(self, input: types.ClinicalScenarioInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="FormulateEvidenceBasedPICOQuestion", args={
            "input": input,
        }, mode="request")
        return result
    async def GenerateCiteSourceReport(self, input: types.CiteSourceReportInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="GenerateCiteSourceReport", args={
            "input": input,
        }, mode="request")
        return result
    async def GenerateClinicalWorkflowQuestions(self, input: types.DdxQuestioningInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="GenerateClinicalWorkflowQuestions", args={
            "input": input,
        }, mode="request")
        return result
    async def GenerateDiagnosticTimeout(self, input: types.DiagnosticTimeoutInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="GenerateDiagnosticTimeout", args={
            "input": input,
        }, mode="request")
        return result
    async def GenerateDrCorvusInsights(self, input: types.LabAnalysisInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="GenerateDrCorvusInsights", args={
            "input": input,
        }, mode="request")
        return result
    async def GenerateEvidenceAppraisal(self, extracted_data: types.EvidenceAnalysisData,clinical_question: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="GenerateEvidenceAppraisal", args={
            "extracted_data": extracted_data,"clinical_question": clinical_question,
        }, mode="request")
        return result
    async def GenerateIllnessScript(self, input: types.IllnessScriptInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="GenerateIllnessScript", args={
            "input": input,
        }, mode="request")
        return result
    async def OptimizeSearchStrategy(self, query: str,cite_source_metrics: types.CiteSourceMetrics,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="OptimizeSearchStrategy", args={
            "query": query,"cite_source_metrics": cite_source_metrics,
        }, mode="request")
        return result
    async def ProvideCompareContrastFeedback(self, input: types.CompareContrastExerciseInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="ProvideCompareContrastFeedback", args={
            "input": input,
        }, mode="request")
        return result
    async def ProvideFeedbackOnProblemRepresentation(self, input: types.BAMLProblemRepresentationInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="ProvideFeedbackOnProblemRepresentation", args={
            "input": input,
        }, mode="request")
        return result
    async def ProvideMatrixFeedback(self, input: types.CompareContrastMatrixInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="ProvideMatrixFeedback", args={
            "input": input,
        }, mode="request")
        return result
    async def ProvideSelfReflectionFeedback(self, input: types.SelfReflectionInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="ProvideSelfReflectionFeedback", args={
            "input": input,
        }, mode="request")
        return result
    async def ProvideSessionSummary_SNAPPS(self, input: types.ProvideSessionSummaryInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="ProvideSessionSummary_SNAPPS", args={
            "input": input,
        }, mode="request")
        return result
    async def QuickClinicalChat(self, history: typing.List["types.Message"],context: typing.Optional["types.PatientContext"] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="QuickClinicalChat", args={
            "history": history,"context": context,
        }, mode="request")
        return result
    async def SuggestPatientFriendlyFollowUpChecklist(self, input: types.PatientFollowUpInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="SuggestPatientFriendlyFollowUpChecklist", args={
            "input": input,
        }, mode="request")
        return result
    async def SummarizeAndStructureClinicalData(self, input: types.ClinicalDataInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="SummarizeAndStructureClinicalData", args={
            "input": input,
        }, mode="request")
        return result
    async def SynthesizeDeepResearch(self, original_query: str,search_results: typing.List["types.RawSearchResultItem"],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="SynthesizeDeepResearch", args={
            "original_query": original_query,"search_results": search_results,
        }, mode="request")
        return result
    async def SynthesizeDeepResearchMinimal(self, original_query: str,search_results: typing.List["types.RawSearchResultItem"],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="SynthesizeDeepResearchMinimal", args={
            "original_query": original_query,"search_results": search_results,
        }, mode="request")
        return result
    async def SynthesizeDeepResearchSimple(self, original_query: str,search_results: typing.List["types.RawSearchResultItem"],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="SynthesizeDeepResearchSimple", args={
            "original_query": original_query,"search_results": search_results,
        }, mode="request")
        return result
    async def TeachQuestionPrioritization(self, input: types.DdxQuestioningInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TeachQuestionPrioritization", args={
            "input": input,
        }, mode="request")
        return result
    async def TranslateToEnglish(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TranslateToEnglish", args={
            "input": input,
        }, mode="request")
        return result
    async def TranslateToPortuguese(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TranslateToPortuguese", args={
            "input": input,
        }, mode="request")
        return result
    

class BamlHttpStreamRequestClient:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    async def AnalyzeCiteSourceResults(self, input: types.CiteSourceAnalysisInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzeCiteSourceResults", args={
            "input": input,
        }, mode="stream")
        return result
    async def AnalyzeClinicalQuery(self, query: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzeClinicalQuery", args={
            "query": query,
        }, mode="stream")
        return result
    async def AnalyzeDifferentialDiagnoses_SNAPPS(self, input: types.AnalyzeDDxInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzeDifferentialDiagnoses_SNAPPS", args={
            "input": input,
        }, mode="stream")
        return result
    async def AnalyzeMedicalPaper(self, paper_text: str,text_type: types.TextType,clinical_question: typing.Optional[str] = None,source_type: typing.Optional[str] = None,publication_year: typing.Optional[int] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzeMedicalPaper", args={
            "paper_text": paper_text,"text_type": text_type,"clinical_question": clinical_question,"source_type": source_type,"publication_year": publication_year,
        }, mode="stream")
        return result
    async def AnalyzePDFDocument(self, input: types.PDFAnalysisInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnalyzePDFDocument", args={
            "input": input,
        }, mode="stream")
        return result
    async def AnswerProbeQuestions_SNAPPS(self, input: types.AnswerProbeQuestionsInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AnswerProbeQuestions_SNAPPS", args={
            "input": input,
        }, mode="stream")
        return result
    async def AssistInIdentifyingCognitiveBiases(self, input: types.CognitiveBiasInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="AssistInIdentifyingCognitiveBiases", args={
            "input": input,
        }, mode="stream")
        return result
    async def BatchTranslateToEnglish(self, inputs: typing.List[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="BatchTranslateToEnglish", args={
            "inputs": inputs,
        }, mode="stream")
        return result
    async def BatchTranslateToPortuguese(self, inputs: typing.List[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="BatchTranslateToPortuguese", args={
            "inputs": inputs,
        }, mode="stream")
        return result
    async def EvaluateManagementPlan_SNAPPS(self, input: types.EvaluateManagementPlanInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="EvaluateManagementPlan_SNAPPS", args={
            "input": input,
        }, mode="stream")
        return result
    async def EvaluateSummary_SNAPPS(self, input: types.EvaluateSummaryInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="EvaluateSummary_SNAPPS", args={
            "input": input,
        }, mode="stream")
        return result
    async def ExpandDifferentialDiagnosis(self, input: types.ExpandDifferentialDiagnosisInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="ExpandDifferentialDiagnosis", args={
            "input": input,
        }, mode="stream")
        return result
    async def ExtractPubMedKeywords(self, complex_query: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="ExtractPubMedKeywords", args={
            "complex_query": complex_query,
        }, mode="stream")
        return result
    async def FacilitateDDxAnalysis_SNAPPS(self, input: types.FacilitateDDxAnalysisInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="FacilitateDDxAnalysis_SNAPPS", args={
            "input": input,
        }, mode="stream")
        return result
    async def FallbackTranslateToEnglish(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="FallbackTranslateToEnglish", args={
            "input": input,
        }, mode="stream")
        return result
    async def FallbackTranslateToPortuguese(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="FallbackTranslateToPortuguese", args={
            "input": input,
        }, mode="stream")
        return result
    async def FormulateDeepResearchStrategy(self, input: types.ResearchTaskInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="FormulateDeepResearchStrategy", args={
            "input": input,
        }, mode="stream")
        return result
    async def FormulateEvidenceBasedPICOQuestion(self, input: types.ClinicalScenarioInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="FormulateEvidenceBasedPICOQuestion", args={
            "input": input,
        }, mode="stream")
        return result
    async def GenerateCiteSourceReport(self, input: types.CiteSourceReportInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="GenerateCiteSourceReport", args={
            "input": input,
        }, mode="stream")
        return result
    async def GenerateClinicalWorkflowQuestions(self, input: types.DdxQuestioningInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="GenerateClinicalWorkflowQuestions", args={
            "input": input,
        }, mode="stream")
        return result
    async def GenerateDiagnosticTimeout(self, input: types.DiagnosticTimeoutInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="GenerateDiagnosticTimeout", args={
            "input": input,
        }, mode="stream")
        return result
    async def GenerateDrCorvusInsights(self, input: types.LabAnalysisInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="GenerateDrCorvusInsights", args={
            "input": input,
        }, mode="stream")
        return result
    async def GenerateEvidenceAppraisal(self, extracted_data: types.EvidenceAnalysisData,clinical_question: typing.Optional[str] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="GenerateEvidenceAppraisal", args={
            "extracted_data": extracted_data,"clinical_question": clinical_question,
        }, mode="stream")
        return result
    async def GenerateIllnessScript(self, input: types.IllnessScriptInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="GenerateIllnessScript", args={
            "input": input,
        }, mode="stream")
        return result
    async def OptimizeSearchStrategy(self, query: str,cite_source_metrics: types.CiteSourceMetrics,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="OptimizeSearchStrategy", args={
            "query": query,"cite_source_metrics": cite_source_metrics,
        }, mode="stream")
        return result
    async def ProvideCompareContrastFeedback(self, input: types.CompareContrastExerciseInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="ProvideCompareContrastFeedback", args={
            "input": input,
        }, mode="stream")
        return result
    async def ProvideFeedbackOnProblemRepresentation(self, input: types.BAMLProblemRepresentationInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="ProvideFeedbackOnProblemRepresentation", args={
            "input": input,
        }, mode="stream")
        return result
    async def ProvideMatrixFeedback(self, input: types.CompareContrastMatrixInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="ProvideMatrixFeedback", args={
            "input": input,
        }, mode="stream")
        return result
    async def ProvideSelfReflectionFeedback(self, input: types.SelfReflectionInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="ProvideSelfReflectionFeedback", args={
            "input": input,
        }, mode="stream")
        return result
    async def ProvideSessionSummary_SNAPPS(self, input: types.ProvideSessionSummaryInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="ProvideSessionSummary_SNAPPS", args={
            "input": input,
        }, mode="stream")
        return result
    async def QuickClinicalChat(self, history: typing.List["types.Message"],context: typing.Optional["types.PatientContext"] = None,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="QuickClinicalChat", args={
            "history": history,"context": context,
        }, mode="stream")
        return result
    async def SuggestPatientFriendlyFollowUpChecklist(self, input: types.PatientFollowUpInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="SuggestPatientFriendlyFollowUpChecklist", args={
            "input": input,
        }, mode="stream")
        return result
    async def SummarizeAndStructureClinicalData(self, input: types.ClinicalDataInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="SummarizeAndStructureClinicalData", args={
            "input": input,
        }, mode="stream")
        return result
    async def SynthesizeDeepResearch(self, original_query: str,search_results: typing.List["types.RawSearchResultItem"],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="SynthesizeDeepResearch", args={
            "original_query": original_query,"search_results": search_results,
        }, mode="stream")
        return result
    async def SynthesizeDeepResearchMinimal(self, original_query: str,search_results: typing.List["types.RawSearchResultItem"],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="SynthesizeDeepResearchMinimal", args={
            "original_query": original_query,"search_results": search_results,
        }, mode="stream")
        return result
    async def SynthesizeDeepResearchSimple(self, original_query: str,search_results: typing.List["types.RawSearchResultItem"],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="SynthesizeDeepResearchSimple", args={
            "original_query": original_query,"search_results": search_results,
        }, mode="stream")
        return result
    async def TeachQuestionPrioritization(self, input: types.DdxQuestioningInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TeachQuestionPrioritization", args={
            "input": input,
        }, mode="stream")
        return result
    async def TranslateToEnglish(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TranslateToEnglish", args={
            "input": input,
        }, mode="stream")
        return result
    async def TranslateToPortuguese(self, input: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.baml_py.HTTPRequest:
        result = await self.__options.merge_options(baml_options).create_http_request_async(function_name="TranslateToPortuguese", args={
            "input": input,
        }, mode="stream")
        return result
    

b = BamlAsyncClient(DoNotUseDirectlyCallManager({}))