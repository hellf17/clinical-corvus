###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Any, Dict, List, Optional, Union, TypedDict, Type, Literal, cast
from typing_extensions import NotRequired

import baml_py

from . import types, partial_types
from .types import Checked, Check
from .type_builder import TypeBuilder


class BamlCallOptions(TypedDict, total=False):
    tb: NotRequired[TypeBuilder]
    client_registry: NotRequired[baml_py.baml_py.ClientRegistry]


class LlmResponseParser:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    def AnalyzeCiteSourceResults(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.CiteSourceAnalysisOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "AnalyzeCiteSourceResults",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.CiteSourceAnalysisOutput, parsed)
    
    def AnalyzeDifferentialDiagnoses_SNAPPS(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.DifferentialAnalysisOutputModel:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "AnalyzeDifferentialDiagnoses_SNAPPS",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.DifferentialAnalysisOutputModel, parsed)
    
    def AnalyzeMedicalPaper(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.EvidenceAnalysisData:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "AnalyzeMedicalPaper",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.EvidenceAnalysisData, parsed)
    
    def AnalyzePDFDocument(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.PDFAnalysisOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "AnalyzePDFDocument",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.PDFAnalysisOutput, parsed)
    
    def AnswerProbeQuestions_SNAPPS(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.ProbeResponseOutputModel:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "AnswerProbeQuestions_SNAPPS",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.ProbeResponseOutputModel, parsed)
    
    def AssistInIdentifyingCognitiveBiases(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.CognitiveBiasReflectionOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "AssistInIdentifyingCognitiveBiases",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.CognitiveBiasReflectionOutput, parsed)
    
    def EvaluateManagementPlan_SNAPPS(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.PlanEvaluationOutputModel:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "EvaluateManagementPlan_SNAPPS",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.PlanEvaluationOutputModel, parsed)
    
    def EvaluateSummary_SNAPPS(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.SummaryFeedbackOutputModel:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "EvaluateSummary_SNAPPS",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.SummaryFeedbackOutputModel, parsed)
    
    def ExpandDifferentialDiagnosis(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.ExpandedDdxOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "ExpandDifferentialDiagnosis",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.ExpandedDdxOutput, parsed)
    
    def ExtractPubMedKeywords(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.SimplifiedQueryOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "ExtractPubMedKeywords",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.SimplifiedQueryOutput, parsed)
    
    def FacilitateDDxAnalysis_SNAPPS(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.FacilitateDDxAnalysisOutputModel:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "FacilitateDDxAnalysis_SNAPPS",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.FacilitateDDxAnalysisOutputModel, parsed)
    
    def FormulateDeepResearchStrategy(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.FormulatedSearchStrategyOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "FormulateDeepResearchStrategy",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.FormulatedSearchStrategyOutput, parsed)
    
    def FormulateEvidenceBasedPICOQuestion(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.PICOFormulationOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "FormulateEvidenceBasedPICOQuestion",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.PICOFormulationOutput, parsed)
    
    def GenerateCiteSourceReport(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.CiteSourceReportOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "GenerateCiteSourceReport",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.CiteSourceReportOutput, parsed)
    
    def GenerateClinicalWorkflowQuestions(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.ClinicalWorkflowQuestionsOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "GenerateClinicalWorkflowQuestions",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.ClinicalWorkflowQuestionsOutput, parsed)
    
    def GenerateDiagnosticTimeout(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.DiagnosticTimeoutOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "GenerateDiagnosticTimeout",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.DiagnosticTimeoutOutput, parsed)
    
    def GenerateDrCorvusInsights(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.LabInsightsOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "GenerateDrCorvusInsights",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.LabInsightsOutput, parsed)
    
    def GenerateEvidenceAppraisal(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.EvidenceAppraisalOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "GenerateEvidenceAppraisal",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.EvidenceAppraisalOutput, parsed)
    
    def GenerateIllnessScript(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.IllnessScriptOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "GenerateIllnessScript",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.IllnessScriptOutput, parsed)
    
    def OptimizeSearchStrategy(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.FormulatedSearchStrategyOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "OptimizeSearchStrategy",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.FormulatedSearchStrategyOutput, parsed)
    
    def ProvideCompareContrastFeedback(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.CompareContrastFeedbackOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "ProvideCompareContrastFeedback",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.CompareContrastFeedbackOutput, parsed)
    
    def ProvideFeedbackOnProblemRepresentation(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.ProblemRepresentationFeedbackOutputModel:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "ProvideFeedbackOnProblemRepresentation",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.ProblemRepresentationFeedbackOutputModel, parsed)
    
    def ProvideSelfReflectionFeedback(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.SelfReflectionFeedbackOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "ProvideSelfReflectionFeedback",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.SelfReflectionFeedbackOutput, parsed)
    
    def ProvideSessionSummary_SNAPPS(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.SessionSummaryOutputModel:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "ProvideSessionSummary_SNAPPS",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.SessionSummaryOutputModel, parsed)
    
    def SuggestPatientFriendlyFollowUpChecklist(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.PatientFollowUpChecklistOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "SuggestPatientFriendlyFollowUpChecklist",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.PatientFollowUpChecklistOutput, parsed)
    
    def SummarizeAndStructureClinicalData(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.StructuredSummaryOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "SummarizeAndStructureClinicalData",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.StructuredSummaryOutput, parsed)
    
    def SynthesizeDeepResearch(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.SynthesizedResearchOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "SynthesizeDeepResearch",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.SynthesizedResearchOutput, parsed)
    
    def SynthesizeDeepResearchMinimal(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.SynthesizedResearchOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "SynthesizeDeepResearchMinimal",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.SynthesizedResearchOutput, parsed)
    
    def SynthesizeDeepResearchSimple(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.SynthesizedResearchOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "SynthesizeDeepResearchSimple",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.SynthesizedResearchOutput, parsed)
    
    def TeachQuestionPrioritization(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.DdxQuestioningOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "TeachQuestionPrioritization",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.DdxQuestioningOutput, parsed)
    
    def TranslateToEnglish(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.TranslationOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "TranslateToEnglish",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.TranslationOutput, parsed)
    
    def TranslateToPortuguese(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> types.TranslationOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "TranslateToPortuguese",
        llm_response,
        types,
        types,
        partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(types.TranslationOutput, parsed)
    


class LlmStreamParser:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    def AnalyzeCiteSourceResults(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.CiteSourceAnalysisOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "AnalyzeCiteSourceResults",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.CiteSourceAnalysisOutput, parsed)
    
    def AnalyzeDifferentialDiagnoses_SNAPPS(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.DifferentialAnalysisOutputModel:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "AnalyzeDifferentialDiagnoses_SNAPPS",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.DifferentialAnalysisOutputModel, parsed)
    
    def AnalyzeMedicalPaper(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.EvidenceAnalysisData:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "AnalyzeMedicalPaper",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.EvidenceAnalysisData, parsed)
    
    def AnalyzePDFDocument(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.PDFAnalysisOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "AnalyzePDFDocument",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.PDFAnalysisOutput, parsed)
    
    def AnswerProbeQuestions_SNAPPS(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.ProbeResponseOutputModel:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "AnswerProbeQuestions_SNAPPS",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.ProbeResponseOutputModel, parsed)
    
    def AssistInIdentifyingCognitiveBiases(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.CognitiveBiasReflectionOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "AssistInIdentifyingCognitiveBiases",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.CognitiveBiasReflectionOutput, parsed)
    
    def EvaluateManagementPlan_SNAPPS(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.PlanEvaluationOutputModel:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "EvaluateManagementPlan_SNAPPS",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.PlanEvaluationOutputModel, parsed)
    
    def EvaluateSummary_SNAPPS(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.SummaryFeedbackOutputModel:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "EvaluateSummary_SNAPPS",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.SummaryFeedbackOutputModel, parsed)
    
    def ExpandDifferentialDiagnosis(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.ExpandedDdxOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "ExpandDifferentialDiagnosis",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.ExpandedDdxOutput, parsed)
    
    def ExtractPubMedKeywords(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.SimplifiedQueryOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "ExtractPubMedKeywords",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.SimplifiedQueryOutput, parsed)
    
    def FacilitateDDxAnalysis_SNAPPS(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.FacilitateDDxAnalysisOutputModel:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "FacilitateDDxAnalysis_SNAPPS",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.FacilitateDDxAnalysisOutputModel, parsed)
    
    def FormulateDeepResearchStrategy(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.FormulatedSearchStrategyOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "FormulateDeepResearchStrategy",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.FormulatedSearchStrategyOutput, parsed)
    
    def FormulateEvidenceBasedPICOQuestion(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.PICOFormulationOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "FormulateEvidenceBasedPICOQuestion",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.PICOFormulationOutput, parsed)
    
    def GenerateCiteSourceReport(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.CiteSourceReportOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "GenerateCiteSourceReport",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.CiteSourceReportOutput, parsed)
    
    def GenerateClinicalWorkflowQuestions(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.ClinicalWorkflowQuestionsOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "GenerateClinicalWorkflowQuestions",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.ClinicalWorkflowQuestionsOutput, parsed)
    
    def GenerateDiagnosticTimeout(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.DiagnosticTimeoutOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "GenerateDiagnosticTimeout",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.DiagnosticTimeoutOutput, parsed)
    
    def GenerateDrCorvusInsights(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.LabInsightsOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "GenerateDrCorvusInsights",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.LabInsightsOutput, parsed)
    
    def GenerateEvidenceAppraisal(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.EvidenceAppraisalOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "GenerateEvidenceAppraisal",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.EvidenceAppraisalOutput, parsed)
    
    def GenerateIllnessScript(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.IllnessScriptOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "GenerateIllnessScript",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.IllnessScriptOutput, parsed)
    
    def OptimizeSearchStrategy(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.FormulatedSearchStrategyOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "OptimizeSearchStrategy",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.FormulatedSearchStrategyOutput, parsed)
    
    def ProvideCompareContrastFeedback(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.CompareContrastFeedbackOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "ProvideCompareContrastFeedback",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.CompareContrastFeedbackOutput, parsed)
    
    def ProvideFeedbackOnProblemRepresentation(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.ProblemRepresentationFeedbackOutputModel:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "ProvideFeedbackOnProblemRepresentation",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.ProblemRepresentationFeedbackOutputModel, parsed)
    
    def ProvideSelfReflectionFeedback(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.SelfReflectionFeedbackOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "ProvideSelfReflectionFeedback",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.SelfReflectionFeedbackOutput, parsed)
    
    def ProvideSessionSummary_SNAPPS(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.SessionSummaryOutputModel:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "ProvideSessionSummary_SNAPPS",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.SessionSummaryOutputModel, parsed)
    
    def SuggestPatientFriendlyFollowUpChecklist(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.PatientFollowUpChecklistOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "SuggestPatientFriendlyFollowUpChecklist",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.PatientFollowUpChecklistOutput, parsed)
    
    def SummarizeAndStructureClinicalData(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.StructuredSummaryOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "SummarizeAndStructureClinicalData",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.StructuredSummaryOutput, parsed)
    
    def SynthesizeDeepResearch(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.SynthesizedResearchOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "SynthesizeDeepResearch",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.SynthesizedResearchOutput, parsed)
    
    def SynthesizeDeepResearchMinimal(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.SynthesizedResearchOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "SynthesizeDeepResearchMinimal",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.SynthesizedResearchOutput, parsed)
    
    def SynthesizeDeepResearchSimple(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.SynthesizedResearchOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "SynthesizeDeepResearchSimple",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.SynthesizedResearchOutput, parsed)
    
    def TeachQuestionPrioritization(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.DdxQuestioningOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "TeachQuestionPrioritization",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.DdxQuestioningOutput, parsed)
    
    def TranslateToEnglish(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.TranslationOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "TranslateToEnglish",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.TranslationOutput, parsed)
    
    def TranslateToPortuguese(
        self,
        llm_response: str,
        baml_options: BamlCallOptions = {},
    ) -> partial_types.TranslationOutput:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      parsed = self.__runtime.parse_llm_response(
        "TranslateToPortuguese",
        llm_response,
        types,
        types,
        partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
      )

      return cast(partial_types.TranslationOutput, parsed)
    


__all__ = ["LlmResponseParser", "LlmStreamParser"]