# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions

from . import stream_types, types
from .runtime import DoNotUseDirectlyCallManager, BamlCallOptions

class LlmResponseParser:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def AnalyzeCiteSourceResults(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CiteSourceAnalysisOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeCiteSourceResults", llm_response=llm_response, mode="request")
        return typing.cast(types.CiteSourceAnalysisOutput, result)

    def AnalyzeClinicalQuery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ClinicalQueryAnalysis:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeClinicalQuery", llm_response=llm_response, mode="request")
        return typing.cast(types.ClinicalQueryAnalysis, result)

    def AnalyzeDifferentialDiagnoses_SNAPPS(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.DifferentialAnalysisOutputModel:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeDifferentialDiagnoses_SNAPPS", llm_response=llm_response, mode="request")
        return typing.cast(types.DifferentialAnalysisOutputModel, result)

    def AnalyzeMedicalPaper(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.EvidenceAnalysisData:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeMedicalPaper", llm_response=llm_response, mode="request")
        return typing.cast(types.EvidenceAnalysisData, result)

    def AnalyzePDFDocument(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.PDFAnalysisOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzePDFDocument", llm_response=llm_response, mode="request")
        return typing.cast(types.PDFAnalysisOutput, result)

    def AnswerProbeQuestions_SNAPPS(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ProbeResponseOutputModel:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnswerProbeQuestions_SNAPPS", llm_response=llm_response, mode="request")
        return typing.cast(types.ProbeResponseOutputModel, result)

    def AssistInIdentifyingCognitiveBiases(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CognitiveBiasReflectionOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AssistInIdentifyingCognitiveBiases", llm_response=llm_response, mode="request")
        return typing.cast(types.CognitiveBiasReflectionOutput, result)

    def BatchTranslateToEnglish(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.BatchTranslationOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="BatchTranslateToEnglish", llm_response=llm_response, mode="request")
        return typing.cast(types.BatchTranslationOutput, result)

    def BatchTranslateToPortuguese(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.BatchTranslationOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="BatchTranslateToPortuguese", llm_response=llm_response, mode="request")
        return typing.cast(types.BatchTranslationOutput, result)

    def EvaluateManagementPlan_SNAPPS(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.PlanEvaluationOutputModel:
        result = self.__options.merge_options(baml_options).parse_response(function_name="EvaluateManagementPlan_SNAPPS", llm_response=llm_response, mode="request")
        return typing.cast(types.PlanEvaluationOutputModel, result)

    def EvaluateSummary_SNAPPS(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.SummaryFeedbackOutputModel:
        result = self.__options.merge_options(baml_options).parse_response(function_name="EvaluateSummary_SNAPPS", llm_response=llm_response, mode="request")
        return typing.cast(types.SummaryFeedbackOutputModel, result)

    def ExpandDifferentialDiagnosis(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ExpandedDdxOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ExpandDifferentialDiagnosis", llm_response=llm_response, mode="request")
        return typing.cast(types.ExpandedDdxOutput, result)

    def ExtractPubMedKeywords(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.SimplifiedQueryOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ExtractPubMedKeywords", llm_response=llm_response, mode="request")
        return typing.cast(types.SimplifiedQueryOutput, result)

    def FacilitateDDxAnalysis_SNAPPS(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.FacilitateDDxAnalysisOutputModel:
        result = self.__options.merge_options(baml_options).parse_response(function_name="FacilitateDDxAnalysis_SNAPPS", llm_response=llm_response, mode="request")
        return typing.cast(types.FacilitateDDxAnalysisOutputModel, result)

    def FallbackTranslateToEnglish(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.TranslationOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="FallbackTranslateToEnglish", llm_response=llm_response, mode="request")
        return typing.cast(types.TranslationOutput, result)

    def FallbackTranslateToPortuguese(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.TranslationOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="FallbackTranslateToPortuguese", llm_response=llm_response, mode="request")
        return typing.cast(types.TranslationOutput, result)

    def FormulateDeepResearchStrategy(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.FormulatedSearchStrategyOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="FormulateDeepResearchStrategy", llm_response=llm_response, mode="request")
        return typing.cast(types.FormulatedSearchStrategyOutput, result)

    def FormulateEvidenceBasedPICOQuestion(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.PICOFormulationOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="FormulateEvidenceBasedPICOQuestion", llm_response=llm_response, mode="request")
        return typing.cast(types.PICOFormulationOutput, result)

    def GenerateCiteSourceReport(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CiteSourceReportOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateCiteSourceReport", llm_response=llm_response, mode="request")
        return typing.cast(types.CiteSourceReportOutput, result)

    def GenerateClinicalWorkflowQuestions(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ClinicalWorkflowQuestionsOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateClinicalWorkflowQuestions", llm_response=llm_response, mode="request")
        return typing.cast(types.ClinicalWorkflowQuestionsOutput, result)

    def GenerateDiagnosticTimeout(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.DiagnosticTimeoutOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateDiagnosticTimeout", llm_response=llm_response, mode="request")
        return typing.cast(types.DiagnosticTimeoutOutput, result)

    def GenerateDrCorvusInsights(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.LabInsightsOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateDrCorvusInsights", llm_response=llm_response, mode="request")
        return typing.cast(types.LabInsightsOutput, result)

    def GenerateEvidenceAppraisal(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.EvidenceAppraisalOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateEvidenceAppraisal", llm_response=llm_response, mode="request")
        return typing.cast(types.EvidenceAppraisalOutput, result)

    def GenerateIllnessScript(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.IllnessScriptOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateIllnessScript", llm_response=llm_response, mode="request")
        return typing.cast(types.IllnessScriptOutput, result)

    def OptimizeSearchStrategy(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.FormulatedSearchStrategyOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OptimizeSearchStrategy", llm_response=llm_response, mode="request")
        return typing.cast(types.FormulatedSearchStrategyOutput, result)

    def ProvideCompareContrastFeedback(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.CompareContrastFeedbackOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ProvideCompareContrastFeedback", llm_response=llm_response, mode="request")
        return typing.cast(types.CompareContrastFeedbackOutput, result)

    def ProvideFeedbackOnProblemRepresentation(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ProblemRepresentationFeedbackOutputModel:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ProvideFeedbackOnProblemRepresentation", llm_response=llm_response, mode="request")
        return typing.cast(types.ProblemRepresentationFeedbackOutputModel, result)

    def ProvideMatrixFeedback(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.MatrixFeedbackOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ProvideMatrixFeedback", llm_response=llm_response, mode="request")
        return typing.cast(types.MatrixFeedbackOutput, result)

    def ProvideSelfReflectionFeedback(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.SelfReflectionFeedbackOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ProvideSelfReflectionFeedback", llm_response=llm_response, mode="request")
        return typing.cast(types.SelfReflectionFeedbackOutput, result)

    def ProvideSessionSummary_SNAPPS(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.SessionSummaryOutputModel:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ProvideSessionSummary_SNAPPS", llm_response=llm_response, mode="request")
        return typing.cast(types.SessionSummaryOutputModel, result)

    def QuickClinicalChat(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.ChatResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="QuickClinicalChat", llm_response=llm_response, mode="request")
        return typing.cast(types.ChatResponse, result)

    def SuggestPatientFriendlyFollowUpChecklist(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.PatientFollowUpChecklistOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="SuggestPatientFriendlyFollowUpChecklist", llm_response=llm_response, mode="request")
        return typing.cast(types.PatientFollowUpChecklistOutput, result)

    def SummarizeAndStructureClinicalData(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.StructuredSummaryOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="SummarizeAndStructureClinicalData", llm_response=llm_response, mode="request")
        return typing.cast(types.StructuredSummaryOutput, result)

    def SynthesizeDeepResearch(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.SynthesizedResearchOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="SynthesizeDeepResearch", llm_response=llm_response, mode="request")
        return typing.cast(types.SynthesizedResearchOutput, result)

    def SynthesizeDeepResearchMinimal(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.SynthesizedResearchOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="SynthesizeDeepResearchMinimal", llm_response=llm_response, mode="request")
        return typing.cast(types.SynthesizedResearchOutput, result)

    def SynthesizeDeepResearchSimple(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.SynthesizedResearchOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="SynthesizeDeepResearchSimple", llm_response=llm_response, mode="request")
        return typing.cast(types.SynthesizedResearchOutput, result)

    def TeachQuestionPrioritization(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.DdxQuestioningOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TeachQuestionPrioritization", llm_response=llm_response, mode="request")
        return typing.cast(types.DdxQuestioningOutput, result)

    def TranslateToEnglish(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.TranslationOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TranslateToEnglish", llm_response=llm_response, mode="request")
        return typing.cast(types.TranslationOutput, result)

    def TranslateToPortuguese(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> types.TranslationOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TranslateToPortuguese", llm_response=llm_response, mode="request")
        return typing.cast(types.TranslationOutput, result)

    

class LlmStreamParser:
    __options: DoNotUseDirectlyCallManager

    def __init__(self, options: DoNotUseDirectlyCallManager):
        self.__options = options

    def AnalyzeCiteSourceResults(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CiteSourceAnalysisOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeCiteSourceResults", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CiteSourceAnalysisOutput, result)

    def AnalyzeClinicalQuery(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ClinicalQueryAnalysis:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeClinicalQuery", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ClinicalQueryAnalysis, result)

    def AnalyzeDifferentialDiagnoses_SNAPPS(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.DifferentialAnalysisOutputModel:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeDifferentialDiagnoses_SNAPPS", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.DifferentialAnalysisOutputModel, result)

    def AnalyzeMedicalPaper(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.EvidenceAnalysisData:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzeMedicalPaper", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.EvidenceAnalysisData, result)

    def AnalyzePDFDocument(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.PDFAnalysisOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnalyzePDFDocument", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.PDFAnalysisOutput, result)

    def AnswerProbeQuestions_SNAPPS(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ProbeResponseOutputModel:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AnswerProbeQuestions_SNAPPS", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ProbeResponseOutputModel, result)

    def AssistInIdentifyingCognitiveBiases(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CognitiveBiasReflectionOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="AssistInIdentifyingCognitiveBiases", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CognitiveBiasReflectionOutput, result)

    def BatchTranslateToEnglish(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.BatchTranslationOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="BatchTranslateToEnglish", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.BatchTranslationOutput, result)

    def BatchTranslateToPortuguese(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.BatchTranslationOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="BatchTranslateToPortuguese", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.BatchTranslationOutput, result)

    def EvaluateManagementPlan_SNAPPS(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.PlanEvaluationOutputModel:
        result = self.__options.merge_options(baml_options).parse_response(function_name="EvaluateManagementPlan_SNAPPS", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.PlanEvaluationOutputModel, result)

    def EvaluateSummary_SNAPPS(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.SummaryFeedbackOutputModel:
        result = self.__options.merge_options(baml_options).parse_response(function_name="EvaluateSummary_SNAPPS", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.SummaryFeedbackOutputModel, result)

    def ExpandDifferentialDiagnosis(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ExpandedDdxOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ExpandDifferentialDiagnosis", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ExpandedDdxOutput, result)

    def ExtractPubMedKeywords(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.SimplifiedQueryOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ExtractPubMedKeywords", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.SimplifiedQueryOutput, result)

    def FacilitateDDxAnalysis_SNAPPS(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.FacilitateDDxAnalysisOutputModel:
        result = self.__options.merge_options(baml_options).parse_response(function_name="FacilitateDDxAnalysis_SNAPPS", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.FacilitateDDxAnalysisOutputModel, result)

    def FallbackTranslateToEnglish(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.TranslationOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="FallbackTranslateToEnglish", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.TranslationOutput, result)

    def FallbackTranslateToPortuguese(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.TranslationOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="FallbackTranslateToPortuguese", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.TranslationOutput, result)

    def FormulateDeepResearchStrategy(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.FormulatedSearchStrategyOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="FormulateDeepResearchStrategy", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.FormulatedSearchStrategyOutput, result)

    def FormulateEvidenceBasedPICOQuestion(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.PICOFormulationOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="FormulateEvidenceBasedPICOQuestion", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.PICOFormulationOutput, result)

    def GenerateCiteSourceReport(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CiteSourceReportOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateCiteSourceReport", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CiteSourceReportOutput, result)

    def GenerateClinicalWorkflowQuestions(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ClinicalWorkflowQuestionsOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateClinicalWorkflowQuestions", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ClinicalWorkflowQuestionsOutput, result)

    def GenerateDiagnosticTimeout(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.DiagnosticTimeoutOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateDiagnosticTimeout", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.DiagnosticTimeoutOutput, result)

    def GenerateDrCorvusInsights(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.LabInsightsOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateDrCorvusInsights", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.LabInsightsOutput, result)

    def GenerateEvidenceAppraisal(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.EvidenceAppraisalOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateEvidenceAppraisal", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.EvidenceAppraisalOutput, result)

    def GenerateIllnessScript(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.IllnessScriptOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="GenerateIllnessScript", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.IllnessScriptOutput, result)

    def OptimizeSearchStrategy(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.FormulatedSearchStrategyOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="OptimizeSearchStrategy", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.FormulatedSearchStrategyOutput, result)

    def ProvideCompareContrastFeedback(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.CompareContrastFeedbackOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ProvideCompareContrastFeedback", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.CompareContrastFeedbackOutput, result)

    def ProvideFeedbackOnProblemRepresentation(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ProblemRepresentationFeedbackOutputModel:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ProvideFeedbackOnProblemRepresentation", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ProblemRepresentationFeedbackOutputModel, result)

    def ProvideMatrixFeedback(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.MatrixFeedbackOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ProvideMatrixFeedback", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.MatrixFeedbackOutput, result)

    def ProvideSelfReflectionFeedback(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.SelfReflectionFeedbackOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ProvideSelfReflectionFeedback", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.SelfReflectionFeedbackOutput, result)

    def ProvideSessionSummary_SNAPPS(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.SessionSummaryOutputModel:
        result = self.__options.merge_options(baml_options).parse_response(function_name="ProvideSessionSummary_SNAPPS", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.SessionSummaryOutputModel, result)

    def QuickClinicalChat(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.ChatResponse:
        result = self.__options.merge_options(baml_options).parse_response(function_name="QuickClinicalChat", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.ChatResponse, result)

    def SuggestPatientFriendlyFollowUpChecklist(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.PatientFollowUpChecklistOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="SuggestPatientFriendlyFollowUpChecklist", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.PatientFollowUpChecklistOutput, result)

    def SummarizeAndStructureClinicalData(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.StructuredSummaryOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="SummarizeAndStructureClinicalData", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.StructuredSummaryOutput, result)

    def SynthesizeDeepResearch(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.SynthesizedResearchOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="SynthesizeDeepResearch", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.SynthesizedResearchOutput, result)

    def SynthesizeDeepResearchMinimal(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.SynthesizedResearchOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="SynthesizeDeepResearchMinimal", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.SynthesizedResearchOutput, result)

    def SynthesizeDeepResearchSimple(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.SynthesizedResearchOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="SynthesizeDeepResearchSimple", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.SynthesizedResearchOutput, result)

    def TeachQuestionPrioritization(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.DdxQuestioningOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TeachQuestionPrioritization", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.DdxQuestioningOutput, result)

    def TranslateToEnglish(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.TranslationOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TranslateToEnglish", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.TranslationOutput, result)

    def TranslateToPortuguese(
        self, llm_response: str, baml_options: BamlCallOptions = {},
    ) -> stream_types.TranslationOutput:
        result = self.__options.merge_options(baml_options).parse_response(function_name="TranslateToPortuguese", llm_response=llm_response, mode="stream")
        return typing.cast(stream_types.TranslationOutput, result)

    