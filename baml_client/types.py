# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (13)
# #########################################################################

class AssessmentValue(str, Enum):
    POSITIVE = "POSITIVE"
    NEUTRAL = "NEUTRAL"
    NEGATIVE = "NEGATIVE"

class DiagnosisCategory(str, Enum):
    RED_FLAG = "RED_FLAG"
    MOST_LIKELY = "MOST_LIKELY"
    SYSTEMATIC_EXPANSION = "SYSTEMATIC_EXPANSION"

class GradeLevel(str, Enum):
    HIGH = "HIGH"
    MODERATE = "MODERATE"
    LOW = "LOW"
    VERY_LOW = "VERY_LOW"

class HypothesisFindingEvaluation(str, Enum):
    SUPPORTS = "SUPPORTS"
    NEUTRAL = "NEUTRAL"
    REFUTES = "REFUTES"

class PossibleCognitiveBias(str, Enum):
    ANCHORING = "ANCHORING"
    CONFIRMATION_BIAS = "CONFIRMATION_BIAS"
    PREMATURE_CLOSURE = "PREMATURE_CLOSURE"
    AVAILABILITY_HEURISTIC = "AVAILABILITY_HEURISTIC"
    REPRESENTATIVENESS_HEURISTIC = "REPRESENTATIVENESS_HEURISTIC"

class RecommendationStrength(str, Enum):
    STRONG = "STRONG"
    WEAK = "WEAK"

class ResearchSourceType(str, Enum):
    PUBMED = "PUBMED"
    EUROPE_PMC = "EUROPE_PMC"
    LENS_SCHOLARLY = "LENS_SCHOLARLY"
    WEB_SEARCH_BRAVE = "WEB_SEARCH_BRAVE"
    COCHRANE = "COCHRANE"
    CLINICAL_TRIALS_GOV = "CLINICAL_TRIALS_GOV"
    ACADEMIC_GOOGLE_SCHOLAR = "ACADEMIC_GOOGLE_SCHOLAR"
    ACADEMIC_NCBI = "ACADEMIC_NCBI"
    ACADEMIC_ELITE_JOURNAL = "ACADEMIC_ELITE_JOURNAL"
    ACADEMIC_DATABASE_GENERAL = "ACADEMIC_DATABASE_GENERAL"
    GUIDELINE_RESOURCE = "GUIDELINE_RESOURCE"
    PREPRINT = "PREPRINT"

class SNAPPSStep(str, Enum):
    SUMMARIZE = "SUMMARIZE"
    NARROW = "NARROW"
    ANALYZE = "ANALYZE"
    PROBE = "PROBE"
    PLAN = "PLAN"
    SELECT = "SELECT"

class StudyDesignType(str, Enum):
    RCT = "RCT"
    COHORT = "COHORT"
    CASE_CONTROL = "CASE_CONTROL"
    CROSS_SECTIONAL = "CROSS_SECTIONAL"
    SYSTEMATIC_REVIEW = "SYSTEMATIC_REVIEW"
    META_ANALYSIS = "META_ANALYSIS"
    CASE_REPORT = "CASE_REPORT"
    REVIEW_ARTICLE = "REVIEW_ARTICLE"
    OTHER = "OTHER"

class StudyTypeFilter(str, Enum):
    ALL = "ALL"
    SYSTEMATIC_REVIEW = "SYSTEMATIC_REVIEW"
    RANDOMIZED_CONTROLLED_TRIAL = "RANDOMIZED_CONTROLLED_TRIAL"
    COHORT_STUDY = "COHORT_STUDY"
    CASE_CONTROL = "CASE_CONTROL"
    CLINICAL_TRIAL = "CLINICAL_TRIAL"
    REVIEW = "REVIEW"

class SuspicionLevel(str, Enum):
    HIGH = "HIGH"
    MODERATE = "MODERATE"
    LOW = "LOW"

class TextType(str, Enum):
    FULL_TEXT = "FULL_TEXT"
    ABSTRACT_ONLY = "ABSTRACT_ONLY"

class UserRole(str, Enum):
    PATIENT = "PATIENT"
    DOCTOR_STUDENT = "DOCTOR_STUDENT"

# #########################################################################
# Generated classes (96)
# #########################################################################

class AnalyzeDDxInput(BaseModel):
    session_state: "SessionState"
    student_differential_diagnoses: typing.List[str]

class AnswerProbeQuestionsInput(BaseModel):
    session_state: "SessionState"
    student_questions: typing.List[str]

class AnsweredQuestion(BaseModel):
    question: str
    answer: str
    rationale: str

class BAMLProblemRepresentationInput(BaseModel):
    full_patient_narrative: str
    user_problem_representation: str
    user_semantic_qualifiers: typing.List[str]

class BatchTranslationOutput(BaseModel):
    translated_texts: typing.List[str]

class BenchmarkComparison(BaseModel):
    industry_percentile: float
    performance_grade: str
    benchmark_insights: typing.List[str]
    improvement_targets: typing.List[str]

class BiasAnalysis(BaseModel):
    id: str
    bias_type: str
    potential_impact: str
    mitigation_strategies: str
    actionable_suggestion: str

class BiasReflectionPoint(BaseModel):
    bias_type: PossibleCognitiveBias
    reflection_question: str

class CaseContext(BaseModel):
    demographics: str
    chief_complaint: str
    physical_exam: str
    vital_signs: str
    full_description: str
    expected_differentials: typing.Optional[typing.List[str]] = None
    learning_objectives: typing.Optional[typing.List[str]] = None
    expert_analysis: typing.Optional[str] = None

class CaseScenarioInput(BaseModel):
    case_vignette: str
    initial_findings: typing.List["ClinicalFinding"]
    plausible_hypotheses: typing.List[str]

class ChatResponse(BaseModel):
    role: str
    message: str
    citations: typing.Optional[typing.List[str]] = None

class CiteSourceAnalysisInput(BaseModel):
    search_results: typing.List["RawSearchResultItem"]
    query: str
    include_visualization_data: typing.Optional[bool] = None

class CiteSourceAnalysisOutput(BaseModel):
    deduplication_summary: "DeduplicationSummary"
    source_performance: typing.List["SourcePerformanceMetrics"]
    quality_assessment: "QualityScores"
    processing_insights: typing.List[str]
    recommendations: typing.List[str]
    deduplicated_results: typing.List["RawSearchResultItem"]
    processing_metadata: "ProcessingMetadata"

class CiteSourceMetrics(BaseModel):
    total_sources_consulted: int
    original_results_count: int
    deduplicated_results_count: int
    deduplication_rate: float
    overall_quality_score: float
    coverage_score: float
    diversity_score: float
    recency_score: float
    impact_score: float
    source_balance_score: float
    best_performing_source: str
    processing_time_ms: float
    key_quality_insights: typing.List[str]

class CiteSourceReportInput(BaseModel):
    query: str
    max_results: typing.Optional[int] = None
    include_detailed_metrics: typing.Optional[bool] = None
    include_recommendations: typing.Optional[bool] = None

class CiteSourceReportOutput(BaseModel):
    executive_summary: "ExecutiveSummary"
    quality_breakdown: "QualityScores"
    source_analysis: "SourceAnalysis"
    deduplication_analysis: "DeduplicationAnalysis"
    actionable_insights: typing.List[str]
    benchmark_comparison: "BenchmarkComparison"
    visual_data_summary: typing.Optional["VisualDataSummary"] = None
    disclaimer: str

class ClinicalDataInput(BaseModel):
    patient_story: str
    known_findings: typing.List["ClinicalFinding"]
    patient_demographics: str

class ClinicalFinding(BaseModel):
    finding_name: str
    details: typing.Optional[str] = None
    onset_duration_pattern: typing.Optional[str] = None
    severity_level: typing.Optional[str] = None

class ClinicalQueryAnalysis(BaseModel):
    query_type: str

class ClinicalScenarioInput(BaseModel):
    clinical_scenario: str
    additional_context: typing.Optional[str] = None

class ClinicalWorkflowQuestionsOutput(BaseModel):
    question_categories: typing.List["QuestionCategory"]
    red_flag_questions: typing.List[str]
    overall_rationale: str

class CognitiveBiasInput(BaseModel):
    case_summary_by_user: typing.Optional[str] = None
    case_vignette_id: typing.Optional[str] = None
    user_identified_biases: typing.List[str]

class CognitiveBiasReflectionOutput(BaseModel):
    potential_biases_to_consider: typing.List["DetectedCognitiveBias"]

class CompareContrastExerciseInput(BaseModel):
    scenario: "CaseScenarioInput"
    student_analysis: typing.List["StudentHypothesisAnalysis"]

class CompareContrastFeedbackOutput(BaseModel):
    overall_feedback: typing.Optional[str] = None
    detailed_feedback_per_hypothesis: typing.List["HypothesisComparisonFeedback"]
    suggested_learning_focus: typing.Optional[str] = None

class CompareContrastMatrixInput(BaseModel):
    scenario: "CaseScenarioInput"
    student_matrix_analysis: typing.List["HypothesisFindingAnalysis"]
    student_chosen_discriminator: str

class DdxEvaluation(BaseModel):
    diagnosis: str
    plausibility: str
    supporting_findings: typing.List[str]
    contradicting_findings: typing.List[str]

class DdxQuestioningInput(BaseModel):
    chief_complaint: str
    initial_findings: typing.List["ClinicalFinding"]
    patient_demographics: str

class DdxQuestioningOutput(BaseModel):
    prioritized_questions: typing.List[str]
    complementary_questions: typing.List[str]
    questioning_rationale: str
    potential_systems_to_explore: typing.List[str]

class DeduplicationAnalysis(BaseModel):
    efficiency_metrics: "DeduplicationSummary"
    duplication_patterns: typing.List[str]
    source_overlap_analysis: str
    optimization_suggestions: typing.List[str]

class DeduplicationSummary(BaseModel):
    original_count: int
    deduplicated_count: int
    removed_duplicates: int
    deduplication_rate: float
    efficiency_score: float

class DetectedCognitiveBias(BaseModel):
    bias_type: str
    explanation_as_question: str
    mitigation_prompt: str

class DiagnosticTimeoutInput(BaseModel):
    case_description: str
    current_working_diagnosis: str
    time_elapsed_minutes: typing.Optional[int] = None
    complexity_level: typing.Optional[str] = None

class DiagnosticTimeoutOutput(BaseModel):
    timeout_recommendation: str
    alternative_diagnoses_to_consider: typing.List[str]
    key_questions_to_ask: typing.List[str]
    red_flags_to_check: typing.List[str]
    next_steps_suggested: typing.List[str]
    cognitive_checks: typing.List[str]

class DifferentialAnalysisOutputModel(BaseModel):
    ddx_evaluation: typing.List["DdxEvaluation"]
    missing_differentials: typing.List[str]
    prioritization_feedback: str
    socratic_questions: typing.List[str]
    next_step_guidance: str

class EvaluateManagementPlanInput(BaseModel):
    session_state: "SessionState"
    student_plan: str

class EvaluateSummaryInput(BaseModel):
    case_context: "CaseContext"
    student_summary: str

class EvidenceAnalysisData(BaseModel):
    study_objective: str
    study_design: StudyDesignType
    population: "PopulationInfo"
    interventions: "InterventionInfo"
    primary_outcomes: typing.List[str]
    key_results: typing.List["KeyResult"]
    authors_conclusions: typing.List[str]
    authors_acknowledged_limitations: typing.List[str]

class EvidenceAppraisalOutput(BaseModel):
    grade_summary: "GradeSummary"
    quality_factors: typing.List["QualityFactor"]
    bias_analysis: typing.List["BiasAnalysis"]
    practice_recommendations: "PracticeRecommendations"

class EvidenceTheme(BaseModel):
    theme_name: str
    key_findings: typing.List[str]
    strength_of_evidence: str
    supporting_studies_count: int

class ExecutiveSummary(BaseModel):
    total_sources_consulted: int
    deduplication_efficiency_rate: float
    overall_quality_grade: str
    best_performing_source: str
    key_strengths: typing.List[str]
    key_improvement_areas: typing.List[str]

class ExpandDifferentialDiagnosisInput(BaseModel):
    presenting_complaint: str
    clinical_signs: typing.Optional[str] = None
    patient_demographics: typing.Optional[str] = None
    user_initial_ddx_list: typing.List[str]

class ExpandedDdxOutput(BaseModel):
    applied_approach_description: str
    suggested_diagnoses: typing.List["ExpandedDiagnosis"]

class ExpandedDiagnosis(BaseModel):
    diagnosis_name: str
    rationale: str
    suspicion_level: SuspicionLevel
    category: DiagnosisCategory

class ExpertHypothesisFindingAnalysis(BaseModel):
    finding_name: str
    hypothesis_name: str
    expert_evaluation: HypothesisFindingEvaluation
    expert_rationale: str

class FacilitateDDxAnalysisInput(BaseModel):
    session_state: "SessionState"
    student_analysis: str

class FacilitateDDxAnalysisOutputModel(BaseModel):
    response: str

class FormulatedSearchStrategyOutput(BaseModel):
    refined_query_for_llm_synthesis: str
    search_parameters_list: typing.List["SearchParameters"]
    search_rationale: str
    expected_evidence_types: typing.List[str]

class GradeSummary(BaseModel):
    overall_quality: GradeLevel
    recommendation_strength: RecommendationStrength
    summary_of_findings: str
    recommendation_balance: "RecommendationBalance"
    reasoning_tags: typing.List["ReasoningTag"]

class HypothesisComparisonFeedback(BaseModel):
    hypothesis_name: str
    feedback_on_supporting_findings: typing.Optional[str] = None
    feedback_on_refuting_findings: typing.Optional[str] = None
    feedback_on_discriminators: typing.Optional[str] = None
    expert_comparison_points: typing.Optional[typing.List[str]] = None

class HypothesisFindingAnalysis(BaseModel):
    finding_name: str
    hypothesis_name: str
    student_evaluation: HypothesisFindingEvaluation
    student_rationale: typing.Optional[str] = None

class IllnessScriptInput(BaseModel):
    disease_name: str

class IllnessScriptOutput(BaseModel):
    disease_name: str
    predisposing_conditions: typing.List[str]
    pathophysiology_summary: str
    key_symptoms_and_signs: typing.List[str]
    relevant_diagnostics: typing.Optional[typing.List[str]] = None

class InterventionInfo(BaseModel):
    intervention_details: str
    comparator_details: str

class KeyResult(BaseModel):
    finding_description: str
    reported_values: str

class LabAnalysisInput(BaseModel):
    lab_results: typing.List["LabTestResult"]
    user_role: UserRole
    patient_context: typing.Optional[str] = None
    specific_user_query: typing.Optional[str] = None

class LabInsightsOutput(BaseModel):
    professional_detailed_reasoning_cot: str
    clinical_summary: str
    important_results_to_discuss_with_doctor: typing.List[str]

class LabTestResult(BaseModel):
    test_name: str
    value: str
    unit: typing.Optional[str] = None
    reference_range_low: typing.Optional[str] = None
    reference_range_high: typing.Optional[str] = None
    interpretation_flag: typing.Optional[str] = None
    notes: typing.Optional[str] = None

class MatrixFeedbackOutput(BaseModel):
    overall_matrix_feedback: str
    discriminator_feedback: str
    expert_matrix_analysis: typing.List["ExpertHypothesisFindingAnalysis"]
    expert_recommended_discriminator: str
    expert_discriminator_rationale: str
    learning_focus_suggestions: typing.List[str]
    matrix_accuracy_score: typing.Optional[float] = None

class Message(BaseModel):
    role: typing.Union[typing_extensions.Literal['user'], typing_extensions.Literal['assistant']]
    content: str

class PDFAnalysisInput(BaseModel):
    pdf_content: str
    analysis_focus: typing.Optional[str] = None
    clinical_question: typing.Optional[str] = None

class PDFAnalysisOutput(BaseModel):
    document_type: str
    key_findings: typing.List[str]
    methodology_summary: str
    clinical_relevance: str
    evidence_quality: str
    recommendations: typing.List[str]
    limitations: typing.List[str]
    structured_summary: str

class PICOFormulationOutput(BaseModel):
    structured_pico_question: "PICOQuestion"
    structured_question: str
    explanation: str
    pico_derivation_reasoning: str
    search_terms_suggestions: typing.List[str]
    boolean_search_strategies: typing.List[str]
    alternative_pico_formulations: typing.Optional[typing.List[str]] = None
    recommended_study_types: typing.List[str]

class PICOQuestion(BaseModel):
    patient_population: str
    intervention: str
    comparison: typing.Optional[str] = None
    outcome: str
    time_frame: typing.Optional[str] = None
    study_type: typing.Optional[str] = None

class PatientContext(BaseModel):
    diagnosis: str
    labs: str
    notes: str
    medications: str

class PatientFollowUpChecklistOutput(BaseModel):
    checklist_items: typing.List[str]
    when_to_contact_doctor_urgently: typing.Optional[typing.List[str]] = None
    general_advice: typing.Optional[str] = None

class PatientFollowUpInput(BaseModel):
    consultation_summary_or_concept_explained: str
    doctor_recommendations_summary: typing.Optional[str] = None

class PlanEvaluationOutputModel(BaseModel):
    plan_strengths: typing.List[str]
    plan_gaps: typing.List[str]
    investigation_priorities: typing.List[str]
    management_considerations: typing.List[str]
    safety_concerns: typing.List[str]
    cost_effectiveness_notes: typing.List[str]
    guidelines_alignment: str
    next_step_guidance: str

class PopulationInfo(BaseModel):
    sample_size: typing.Optional[int] = None
    key_demographics: str
    inclusion_criteria: typing.List[str]
    exclusion_criteria: typing.List[str]

class PracticeRecommendations(BaseModel):
    clinical_application: str
    monitoring_points: typing.List[str]
    evidence_caveats: str

class ProbeResponseOutputModel(BaseModel):
    answers_to_questions: typing.List["AnsweredQuestion"]
    additional_considerations: typing.List[str]
    counter_questions: typing.List[str]
    knowledge_gaps_identified: typing.List[str]
    learning_resources: typing.List[str]

class ProblemRepresentationFeedbackOutputModel(BaseModel):
    feedback_strengths: typing.List[str]
    feedback_improvements: typing.List[str]
    missing_elements: typing.List[str]
    overall_assessment: str
    next_step_guidance: str
    socratic_questions: typing.List[str]

class ProcessingMetadata(BaseModel):
    total_processing_time_ms: float
    sources_analyzed: int
    timestamp: str
    version: str

class ProvideSessionSummaryInput(BaseModel):
    session_state: "SessionState"

class QualityFactor(BaseModel):
    id: str
    factor_name: str
    assessment: AssessmentValue
    justification: str

class QualityScores(BaseModel):
    overall_score: float
    coverage_score: float
    diversity_score: float
    recency_score: float
    impact_score: float
    source_balance_score: float

class QuestionCategory(BaseModel):
    category_name: str
    questions: typing.List[str]
    category_rationale: str

class RawSearchResultItem(BaseModel):
    source: ResearchSourceType
    title: str
    url: typing.Optional[str] = None
    snippet_or_abstract: str
    publication_date: typing.Optional[str] = None
    authors: typing.Optional[typing.List[str]] = None
    journal: typing.Optional[str] = None
    pmid: typing.Optional[str] = None
    doi: typing.Optional[str] = None
    study_type: typing.Optional[str] = None
    citation_count: typing.Optional[int] = None
    relevance_score: typing.Optional[float] = None
    composite_impact_score: typing.Optional[float] = None
    academic_source_name: typing.Optional[str] = None

class ReasoningTag(BaseModel):
    tag: str
    reference_id: str

class RecommendationBalance(BaseModel):
    positive_factors: typing.List[str]
    negative_factors: typing.List[str]
    overall_balance: str
    reasoning_tags: typing.List[str]

class ResearchMetrics(BaseModel):
    total_articles_analyzed: int
    sources_consulted: typing.List[str]
    search_duration_seconds: float
    quality_filters_applied: typing.List[str]
    date_range_searched: typing.Optional[str] = None
    language_filters_applied: typing.Optional[typing.List[str]] = None
    search_strategy_summary: typing.Optional[str] = None
    unique_journals_found: int
    high_impact_studies_count: int
    recent_studies_count: int
    systematic_reviews_count: int
    rct_count: int
    cite_source_metrics: typing.Optional["CiteSourceMetrics"] = None

class ResearchTaskInput(BaseModel):
    user_original_query: str
    pico_question: typing.Optional["PICOQuestion"] = None
    research_focus: typing.Optional[str] = None
    target_audience: typing.Optional[str] = None
    research_mode: typing.Optional[str] = None

class SearchParameters(BaseModel):
    source: ResearchSourceType
    query_string: str
    max_results: typing.Optional[int] = None
    study_type_filter: typing.Optional[StudyTypeFilter] = None
    date_range_years: typing.Optional[int] = None
    language_filter: typing.Optional[str] = None
    rationale: typing.Optional[str] = None

class SelfReflectionFeedbackOutput(BaseModel):
    identified_reasoning_pattern: str
    bias_reflection_points: typing.List["BiasReflectionPoint"]
    devils_advocate_challenge: str
    suggested_next_reflective_action: str

class SelfReflectionInput(BaseModel):
    clinical_scenario: str
    user_hypothesis: str
    user_reasoning_summary: str

class SessionState(BaseModel):
    case_context: "CaseContext"
    student_summary: typing.Optional[str] = None
    student_ddx: typing.Optional[typing.List[str]] = None
    student_analysis: typing.Optional[str] = None
    student_probe_questions: typing.Optional[typing.List[str]] = None
    student_management_plan: typing.Optional[str] = None
    student_selected_topic: typing.Optional[str] = None
    feedback_history: typing.List[str]

class SessionSummaryOutputModel(BaseModel):
    overall_performance: str
    key_strengths: typing.List[str]
    areas_for_development: typing.List[str]
    learning_objectives_met: typing.List[str]
    recommended_study_topics: typing.List[str]
    metacognitive_insights: typing.List[str]
    next_cases_suggestions: typing.List[str]

class SimplifiedQueryOutput(BaseModel):
    simplified_query: str

class SourceAnalysis(BaseModel):
    source_rankings: typing.List["SourcePerformanceMetrics"]
    coverage_analysis: str
    diversity_assessment: str
    performance_insights: typing.List[str]

class SourcePerformanceMetrics(BaseModel):
    source_name: str
    total_results: int
    unique_contributions: int
    quality_score: float
    response_time_ms: float
    recent_publications_count: int
    high_impact_count: int

class StructuredSummaryOutput(BaseModel):
    one_sentence_summary: str
    semantic_qualifiers_identified: typing.List[str]
    key_patient_details_abstracted: typing.List[str]
    suggested_areas_for_further_data_gathering: typing.List[str]

class StudentHypothesisAnalysis(BaseModel):
    hypothesis_name: str
    supporting_findings: typing.List[str]
    refuting_findings: typing.List[str]
    key_discriminators_against_others: typing.List[str]

class SummaryFeedbackOutputModel(BaseModel):
    feedback_strengths: typing.List[str]
    feedback_improvements: typing.List[str]
    missing_elements: typing.List[str]
    overall_assessment: str
    next_step_guidance: str
    socratic_questions: typing.List[str]

class SynthesizedResearchOutput(BaseModel):
    original_query: str
    executive_summary: str
    professional_detailed_reasoning_cot: str
    clinical_implications: typing.List[str]
    key_findings_by_theme: typing.List["EvidenceTheme"]
    research_gaps_identified: typing.List[str]
    evidence_quality_assessment: str
    relevant_references: typing.List["RawSearchResultItem"]
    research_metrics: typing.Optional["ResearchMetrics"] = None
    search_duration_seconds: typing.Optional[float] = None

class TranslationOutput(BaseModel):
    translated_text: str

class VisualDataSummary(BaseModel):
    chart_data_available: bool
    supported_visualizations: typing.List[str]
    data_summary: str

# #########################################################################
# Generated type aliases (0)
# #########################################################################
