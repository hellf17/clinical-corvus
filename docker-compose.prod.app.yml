version: '3.9'

services:
  postgres:
    image: postgres:15-alpine
    container_name: clinical-corvus-postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - clinical-corvus-prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: clinical-corvus-redis-prod
    restart: unless-stopped
    volumes:
      - redis_data_prod:/data
    networks:
      - clinical-corvus-prod
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend-api:
    build:
      context: .
      dockerfile: ./backend-api/Dockerfile.prod
    container_name: clinical-corvus-backend-prod
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - CLERK_API_URL=${CLERK_API_URL}
      - CLERK_API_VERSION=${CLERK_API_VERSION}
      - CLERK_JWT_ISSUER=${CLERK_JWT_ISSUER}
      - CLERK_JWT_AUDIENCE=${CLERK_JWT_AUDIENCE}
      - FRONTEND_URL=${FRONTEND_URL}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - MCP_SERVER_URL=${MCP_SERVER_URL}
      - DEEPL_API_KEY=${DEEPL_API_KEY}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - LLAMA_CLOUD_API_KEY=${LLAMA_CLOUD_API_KEY}
      - BRAVE_API_KEY=${BRAVE_API_KEY}
      - NCBI_API_KEY=${NCBI_API_KEY}
      - GROUP_SESSION_ENCRYPTION_KEY=${GROUP_SESSION_ENCRYPTION_KEY}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - clinical-corvus-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  mcp_server:
    build:
      context: .
      dockerfile: ./mcp_server/Dockerfile.prod
    container_name: clinical-corvus-mcp-prod
    restart: unless-stopped
    environment:
      - MCP_PORT=8001
      - ENVIRONMENT=production
      # Configure if using Neo4j in production
      - NEO4J_URI=${NEO4J_URI}
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
    ports:
      - "8001:8001"
    networks:
      - clinical-corvus-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: clinical-corvus-frontend-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
      - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}
    ports:
      - "3000:3000"
    depends_on:
      backend-api:
        condition: service_healthy
    networks:
      - clinical-corvus-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data_prod:
  redis_data_prod:

networks:
  clinical-corvus-prod:
    driver: bridge

